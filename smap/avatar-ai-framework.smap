{"sandbox_archive_version":61,"resources":[{"default":[]},{"autogenerated":[]},{"terrainImport":[]}],"resourceCart":[{"guid":[1101897418,2507817835,3094537286,1546502699],"name":"Local","parentGuid":[0,0,0,0],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":51}"},{"guid":[20081327,3811722658,2346874489,3237291753],"name":"Global","parentGuid":[0,0,0,0],"type":"kGeneric","preload":false,"meta":"{\"sandbox_archive_version\":51}"}],"mapdata":[{"ObjectsLinker":[{"class":"cWorkspace","name":"Archetypes","guid":[2301495294,1274365006,3003438828,1864040556],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cPlayerInstance","name":"Player","guid":[821939657,2231651804,3205518288,3133023722],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cPlayerAvatarInstance","name":"Avatar","guid":[2086577372,1035157785,2412732698,2224839101],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_Head","guid":[1952377286,2257011431,2235437585,1990350708],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_R_Hand","guid":[1365265308,2584495651,3179854900,2314059387],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_L_Hand","guid":[1001141281,105596195,2413995681,1572381856],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_Pelvis","guid":[3930266631,3765193548,2657671196,2444667291],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_R_Foot","guid":[1011560467,1551582414,3132691223,44035332],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBoneAnchor","name":"Bone_L_Foot","guid":[3538847244,808075570,2480843790,1198870357],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiSurfaceUiObject","name":"NameGUI","guid":[1405111285,2384023431,3182972373,2500518680],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiTextObject","name":"NameBar","guid":[2026945124,2380024573,3064606367,171005546],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiSurfaceUiObject","name":"HealthGUI","guid":[1362459126,1156792341,2681269783,824873225],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiImageObject","name":"Background","guid":[2692120497,1768836605,2660612515,4269796384],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiImageObject","name":"HealthBar","guid":[3177680961,308758981,2341371969,3691269346],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cScriptObject","name":"PlayerControlScript","guid":[1560065165,549536527,2196214773,3289613067],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cScriptObject","name":"PlayerGUIScript","guid":[4094515156,1401045121,2425964011,2999181753],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cBlackholeFolderObject","name":"Local","guid":[417325223,2932100337,2430726746,1418825083],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cUiScreenUiObject","name":"ControlGUI","guid":[2288685280,129189584,3004433564,697975946],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiFigureObject","name":"TouchFigure","guid":[2197565629,1415203114,2823922405,1734351976],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiButtonObject","name":"JumpButton","guid":[102160580,854410432,2549292484,1202403965],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cUiJoystickObject","name":"Joystick","guid":[214363713,4292497295,3028021729,2005335375],"spaceId":"kArchetypeSpace","objectType":-842150451},{"class":"cIndependentObject","name":"Independent","guid":[2453424774,3327281782,3111155612,3452615377],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cCamera","name":"GameCamera","guid":[759347957,2245412439,2215380327,3955432270],"spaceId":"kArchetypeSpace","objectType":0},{"class":"cIndependentObject","name":"Independent","guid":[2035801620,2134724308,2629534182,769215545],"spaceId":"kArchetypeSpace","objectType":0}],"ObjectsData":[{"class":"cWorkspace","name":"Archetypes","guid":[2301495294,1274365006,3003438828,1864040556],"parentGuid":[0,0,0,0],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Archetypes"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sWorkspaceComponent","data":{}},{"id":11,"class":"sConfigPhysicsComponent","data":{"m_collisionGroupMaskFlags":[0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]},{"class":"cPlayerInstance","name":"Player","guid":[821939657,2231651804,3205518288,3133023722],"parentGuid":[2301495294,1274365006,3003438828,1864040556],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Player"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sRigidBodyComponent","data":{"m_isStatic":false,"m_density":1000.0,"m_frictionRate":0.0,"m_rough":0.0,"m_restitution":0.0,"m_freezeRotation":true,"m_gravityScale":2.0,"m_statusFlag":10}},{"id":20,"class":"sCharacterControllerComponent","data":{"m_characterWidth":0.5,"m_jumpUpVelocity":8.0}},{"id":40,"class":"sCharacterStateComponent","data":{"m_respawnTime":3.0,"m_avatar":[2086577372,1035157785,2412732698,2224839101],"m_displayName":true}},{"id":50,"class":"sRenderComponent","data":{}},{"id":60,"class":"sNetworkComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{"m_syncRotation":[0.0,0.0,0.0,1.0],"m_distrSimVersion":0}}]},{"class":"cPlayerAvatarInstance","name":"Avatar","guid":[2086577372,1035157785,2412732698,2224839101],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Avatar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerModelInstanceComponent","data":{"m_head":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Head2","Male_Head3"]},"m_clothes":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Chest_Naked_01","Male_Chest_TshirtShort_A001","Male_Chest_TshirtShort_A002","Male_Chest_TshirtShort_A003","Male_Chest_TshirtShort_A004","Male_Chest_TshirtShort_A005","Male_Chest_TshirtShort_A006","Male_Chest_TshirtShort_A007","Male_Chest_TshirtShort_A008","Male_Chest_TshirtShort_A009","Male_Chest_TshirtShort_A010","Male_Chest_TshirtShort_B001","Male_Chest_TshirtShort_B002","Male_Chest_TshirtShort_B003","Male_Chest_TshirtShort_B004","Male_Chest_TshirtShort_B005","Male_Chest_TshirtShort_B02001","Male_Chest_TshirtShort_B02002","Male_Chest_TshirtShort_B02003","Male_Chest_TshirtShort_B02004","Male_Chest_TshirtShort_B03001","Male_Chest_TshirtShort_B03002","Male_Chest_TshirtShort_03001","Male_Chest_TshirtShort_03002","Male_Chest_TshirtShort_03003","Male_Chest_TshirtShort_03004","Male_Chest_TshirtShort_03005","Male_Chest_SweaterLong_A001","Male_Chest_SweaterLong_A002","Male_Chest_SweaterLong_A003","Male_Chest_SweaterLong_A004","Male_Chest_SweaterLong_A005","Male_Chest_SweaterLong_A006","Male_Chest_SweaterLong_A007","Male_Chest_SweaterLong_A008","Male_Chest_SweaterLong_A009","Male_Chest_SweaterLong_A010","Male_Chest_SweaterLong_A011","Male_Chest_SweaterLong_A012","Male_Chest_SweaterLong_A013","Male_Chest_SweaterLong_A014","Male_Chest_SweaterLong_A015","Male_Chest_SweaterLong_A016","Male_Chest_SweaterLong_A017","Male_Chest_Jacket_Baseball_A001","Male_Chest_Jacket_Baseball_A002","Male_Chest_Jacket_Baseball_A003","Male_Chest_Jacket_Baseball_A004","Male_Chest_Jacket_Baseball_A005","Male_001Jacket","Male_Jacket_Leis01","RedJacket","Male_Jacket_Leis02","Male_Jacket_Leis03","Male_006Jacket","Male_007Jacket","Male_008Tshirt","Male_009Jacket","Male_010Tshirt","Male_011Tshirt","Male_012Jacket","Male_Chest_Robe_India_001","Male_Chest_JacketIndiaSilk_001","Male_AviatorJacket","Male_MexicJacket","Male_SpaceJacket","Male_BaseballJacket","Male_BaseballJacket_02","Male_UniverJacket","Male_UniverJacket_01","Male_OwlJacket","Male_OwlJacket_02","Male_Chest_ArmorGriffin_001","Male_Chest_ArmorGriffin_002","Unisex_Chest_ArmorIron_001","Unisex_Chest_ArmorIron_002","Male_WendigoJacket","Male_WendigoJacket_02","Male_NutJacket","Male_Chest_UniformPolice_001","Male_Chest_TshitSki_001","Male_Chest_JacketRobtDog_001","Male_Chest_MuscleSuitShark_001","Male_Chest_MuscleSuitShark_002","Male_Chest_TshirtWaste_001","Male_Chest_TshirtWaste_00","Male_Chest_JacketBiker_001","Male_Chest_JacketMotor_001","Male_Chest_TshirtSteam_001","Male_Chest_JacketRobtEva_001","Male_Chest_JacketRobtEva_002","Male_Chest_JacketRobtEva_003","Male_Chest_JacketRobtEva_004","Male_Chest_JacketAI_001","Male_Chest_JacketAI_002","Male_Chest_MadMaxVest_001","Male_Chest_MadMaxVest_002","Male_Chest_MadMaxVest_003","Male_Chest_TshirtCowboy_001","Male_Zombies01Tshirt","Male_Zombies03Jacket","Male_Zombies04Tshirt","Male_Zombies06Jacket","Male_Chest_JacketElf_001","Male_Chest_JacketCasual_001","Male_Chest_TshirtSArmy_001","Male_Chest_UniformSoccer_001","Male_Chest_JacketFire_001","Male_Chest_TshirtSStreetball_01_001","Male_Chest_TshirtSStreetball_02_002","Male_Chest_JacketEnergy_01_001","Male_Chest_SuitSuit_02_001","Male_Chest_SuitSuit_TV_001","Male_Chest_JacketLeisure_001","Male_Chest_ShirtLeisure_001","Male_Chest_TshirtSkater_001","Male_Chest_JacketWaste_002","Male_Chest_JacketWaste_02_002","Male_Chest_SweaterUnicorn_001","Male_Chest_JacketGreenBerets_001","Male_Chest_JacketSnow_01_001","Male_Chest_JacketSnow_01_002"]},"m_trousers":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Jeans01Trousers","Male_Leis01Trousers","Male_003Trousers","Male_Leis01Pants","Male_Leis03Trousers","Male_006Trousers","Male_007Trousers","Male_008Trousers","Male_009Trousers","Male_010Trousers","Male_011Trousers","Male_012Pants","Male_Leg_Pants_India_001","Male_Leg_TrousersIndiaSilk_001","Male_AviatorTrousers","Male_AviatorTrousers_02","Male_MexicTrousers","Male_SpaceTrousers","Male_BaseballTrousers","Male_BaseballTrousers_02","Male_UniverTrousers","Male_UniverTrousers_01","Male_OwlTrousers","Male_OwlTrousers_02","Male_Leg_ArmorGriffin_001","Male_Leg_ArmorGriffin_002","Male_Leg_ArmorIron_001","Male_Leg_ArmorIron_002","Male_WendigoTrousers","Male_WendigoTrousers_02","Male_NutTrousers","Male_Leg_PantsLPolice_001","Male_Leg_PantsLPolice_002","Male_Leg_PantsLSki_001","Male_Leg_PantsLRobtDog_001","Male_Leg_TrousersWaste_001","Male_Leg_TrousersWaste_00","Male_Leg_TrousersBiker_001","Male_Leg_TrousersLMotor_001","Male_Leg_TrousersSteam_001","Male_Leg_PantsLRobtEva_001","Male_Leg_PantsLRobtEva_002","Male_Leg_PantsLAI_001","Male_Leg_TrousersMadMax_001","Male_Leg_TrousersMadMax_002","Male_Leg_TrousersCowboy_001","Male_Zombies01Pants","Male_Zombies03Trousers","Male_Zombies04Trousers","Male_Zombies06Trousers","Male_Leg_TrousersElf_001","Male_Leg_TrousersCasual_001","Male_Leg_PantsLArmy_001","Male_Leg_PantsSoccer_001","Male_Leg_FireTrousers","Male_Leg_Streetball_01PantsS","Male_Leg_Energy_01_MPantsS","Male_Leg_BeachShorts_A001","Male_Leg_BeachShorts_A002","Male_Leg_BeachShorts_A003","Male_Leg_BeachShorts_A004","Male_Leg_BeachShorts_A005","Male_Leg_BeachShorts_A006","Male_Leg_BeachShorts_A007","Male_Leg_BeachShorts_A008","Male_Leg_PantsShark_001","Male_Leg_PantsShark_002","Male_Leg_Suit_02_MTrousers","Male_Leg_Suit_TV_MTrousers","Male_Leg_PantsLLeisure_001","Male_Leg_PantsSkater_001","Male_Leg_PantsSWaste_002","Male_Leg_PantsLUnicorn_001","Male_Leg_TrousersGreenBerets_001","Male_Leg_PantsLSnow_01_001","Male_Leg_PantsLSnow_01_002"]},"m_hair":{"attriValue":"DefaultMale","valueList":["DefaultMale","Hair_Brown01M","Hair_Blonde01M","Hair_Blonde02M","Hair_Orange01M","Hair_White01M","Hair_Green01M","Male_Head_Hair_010","Male_Head_Hair_014","Male_Head_Hair_015","Male_Head_Hair_018","Male_Head_Hair_019","Male_Head_Hair_020","Male_Head_Hair_023","Male_Head_Hair_024","Male_Head_Hair_028","Male_Head_Hair_030","Male_Head_Hair_033","Hair_Zombies06_M"]},"m_hairColor":{"attriValue":"","valueList":["DefaultMale","Hair_Male_02","Hair_Male_03","Hair_Male_04","Hair_Male_05","Hair_Male_06","Hair_Male_07","Hair_Male_08","Hair_Male_09","Hair_Male_10","Hair_Male_11","Hair_Male_12","Hair_Male_13","Hair_Male_14","Hair_Male_15","Hair_Male_16","Hair_Male_17","Hair_Male_18","Hair_Male_19","Hair_Male_20","Hair_Male_21","Hair_Male_22","Hair_Male_23","Hair_Male_24"]},"m_hands":{"attriValue":"DefaultMale","valueList":["DefaultMale","Default_Hands","Male_GLeather01","Male_AviatorGloves","Male_SpaceGloves","Male_BaseballGloves","Male_UniverGloves","Male_UniverGloves_01","Male_OwlGloves","Unisex_Hand_GlovesGriffin_001","Unisex_Hand_GlovesIron_001","Male_WendigoGloves","Male_WendigoGloves_02","Unisex_Hand_GlovesSki_001","Unisex_Hand_GlovesRobtDog_001","Male_Hand_GlovesBiker_001","Unisex_Hand_GlovesRobtEva_001","Unisex_Hand_GlovesRobtEva_002","Unisex_Hand_GlovesAI_001","Male_Hand_GlovesSteam_001","Male_Hand_GlovesElf_001","Male_Hand_GlovesFire_001","Male_Hand_GlovesStreetball_001"]},"m_shoes":{"attriValue":"DefaultMale","valueList":["DefaultMale","Male_Feet_Naked_01","LeatherShoe","Male_Leis01Shoes","Unisex_Feet_CanvasShoes_A001","Unisex_Feet_CanvasShoes_A002","Unisex_Feet_CanvasShoes_A003","Unisex_Feet_CanvasShoes_A004","Unisex_Feet_CanvasShoes_A005","Unisex_Feet_CanvasShoes_A006","Unisex_Feet_CanvasShoes_A007","Unisex_Feet_CanvasShoes_A008","Unisex_Feet_CanvasShoes_A009","Unisex_Feet_CanvasShoes_A010","Unisex_Feet_Sneakers_01001","Unisex_Feet_Sneakers_01002","Unisex_Feet_Sneakers_01003","Unisex_Feet_Sneakers_01004","Unisex_Feet_Sneakers_01005","Unisex_Feet_Sneakers_01006","Unisex_Feet_Sneakers_01007","Unisex_Feet_Sneakers_01008","Unisex_Feet_Sneakers_01009","Unisex_Feet_Sneakers_01010","Unisex_Feet_Sneakers_01011","Unisex_Feet_Sneakers_01012","Unisex_Feet_Sneakers_01013","Unisex_Feet_Sneakers_01014","Unisex_Feet_Sneakers_01015","Unisex_Feet_Sneakers_01016","Male_003Shoes","Male_BLeather01","Male_Leis03Shoes","Male_006Shoes","Male_007Shoes","Male_008Shoes","Male_009Shoes","Unisex_Feet_BasketballShoes_003","Male_010Shoes","Male_011Boots","Male_012Boots","Male_Feet_Shoes_India_001","Male_Feet_ShoesIndiaSilk_001","Male_AviatorShoes","Male_MexicBoots","Male_SpaceBoots","Male_BaseballShoes","Male_UniverShoes","Male_UniverShoes_01","Male_OwlBoots","Unisex_Feet_ShoesGriffin_001","Unisex_Feet_ShoesIron_001","Male_WendigoShoes","Male_WendigoShoes_02","Male_NutBoots","Unisex_Feet_ShoesPolice_001","Unisex_Feet_BootsSki_001","Unisex_Feet_ShoesSki_001","Male_Feet_ShoesRobtDog_001","Unisex_Feet_SlippersShark_001","Male_Feet_BootsWaste_001","Male_Feet_BootsBiker_001","Male_Feet_BootsMotor_001","Male_Feet_BootsSteam_001","Unisex_Feet_ShoesRobtEva_001","Unisex_Feet_ShoesRobtEva_002","Unisex_Feet_ShoesAI_001","Male_Feet_BootsMadMax_001","Male_Feet_BootsCowboy_001","Male_Zombies01Shoes","Male_Zombies03Boots","Male_Zombies04Boots","Male_Zombies06Shoes","Male_Feet_BootsElf_001","Male_Feet_ShoesCasual_001","Unisex_Feet_ShoesDiving_001","Unisex_Feet_FinsDiving_001","Unisex_Feet_FinsDiving_002","Unisex_Feet_FinsDiving_003","Unisex_Feet_FinsDiving_004","Unisex_Feet_FinsDiving_005","Unisex_Feet_FinsDiving_006","Unisex_Feet_FinsDiving_007","Unisex_Feet_BootArmy_001","Male_Soccer_001_Shoes","Unisex_Feet_ShoesFire_001","Male_Streetball_01_Shoes","Male_Feet_BootsEnergy_01_M_001","Male_Feet_BootsSuit_02_M_001","Male_Feet_BootsSuit_TV_M_001","Female_Soccer_001_Shoes","Female_waste_04_Shoes","Female_Feet_ShoesLeisure_001","Male_Feet_ShoesLeisure_001","Male_Feet_ShoesSkater_001","Female_Feet_BootsWaste_002","Male_Feet_BootsUnicorn_001","Male_Feet_BootsGreenBerets_001","Male_Feet_BootsSnow_01_001"]},"m_skinColor":{"attriValue":"DefaultMale","valueList":["DefaultMale","Color2","Color3","Color4","Color5","Color6","Color7","Color8","Color9","Color10","Color11","Color12","Color13"]},"m_headAccessory":{"attriValue":"Empty_Head","valueList":["Empty_Head","Male_ComHat_001","Male_ComHat003","Male_ComHat004","Male_ComHat005","Male_ComHat006","Male_ComHat007","Male_ComHat00702","Male_ComHat00703","Unisex_Head_Hat_016","Male_008Hat","Male_010Hat","Male_011Hat","Male_012Hat","Male_Head_Hat_Leisure_001","Male_Head_Hat_Skater_001","Male_Head_ComHelmet_002","Male_ComHelmet003","Male_ComHelmet004","Male_ComHelmet005","Male_013Hat","Female_013Hat","Male_Head_HatCowboy_001","Male_Head_HatCasual_001","Male_AviatorHat","Male_MexicHat","Male_SpaceHelmet","Male_Baseball01Hat","Male_Baseball02Hat","Male_Baseball03Hat","Male_Baseball04Hat","Male_UniverHelmet","Male_UniverHelmet_01","Male_Owl_Helmet","Male_Head_HelmetGriffin_001","Unisex_Head_HelmetIron_001","Male_Wendigo_Helmet","Male_Wendigo_Helmet_02","Male_Nut_Helmet","Male_Head_Hat_Unicorn","Unisex_Head_MaskPolice_001","Unisex_Head_CapPolice_001","Unisex_Head_CapSki_001","Male_Head_HelmetRobtDog_001","Male_Head_HelmetShark_001","Male_Head_HelmetBiker_001","Female_Head_HelmetBiker_001","Female_Head_HelmetMotor_001","Male_Head_HelmetMotor_001","Male_Head_HatSteam_001","Unisex_Head_HelmetRobtEva_001","Unisex_Head_HelmetRobtEva_002","Unisex_Head_HelmetAI_001","Male_Head_HelmetSuit_TV_001","Female_Head_HelmetSuit_TV_001","Male_Head_Hat_India_001","Male_Head_HelmetIndiaSilk_001","Male_Head_HelmetIndiaSilk_002","Unisex_Head_HelmetArmy_001","Unisex_Head_HelmetFire_001","Male_Zombies01Hat","Male_Zombies03_Helmet","Male_Zombies04_Helmet","Male_Zombies06_Hat","Male_Head_HatElf_001","Unisex_Head_HelmetDiving_001","Unisex_Head_HelmetMadMax","Unisex_Head_HelmetGreenBerets","Unisex_Head_HelmetSnow_01_001","Unisex_Head_HatSnow_01_001","Unisex_Head_Headset_001","Unisex_Head_Headset_002","Unisex_Head_Headset_003","Unisex_Head_Headset_004","Unisex_Head_Headset_005","Unisex_Head_Hat_012","Unisex_Head_Hat_013","Unisex_Head_Hat_01401","Unisex_Head_Hat_01402","Unisex_Head_Hat_015"]},"m_faceAccessory":{"attriValue":"Empty_Face","valueList":["Empty_Face","Glasses","Unisex_Head_GlassLeisure_001","Unisex_Head_GlassSkater_001","Unisex_Head_GlassEnergy_001","Female_MadMax_Glasses","Unisex_Head_Glass_00101","Unisex_Head_Glass_00102","Unisex_Head_Glass_00201","Unisex_Head_Glass_00202","Unisex_Head_Glass_00203","Unisex_Head_Glass_003","Unisex_Head_Glass_004","Unisex_Head_Glass_005","Unisex_Head_Glass_006","Unisex_Head_Glass_007","Unisex_Head_Glass_008","Unisex_Head_Glass_010","Unisex_Head_Glass_011","Unisex_Head_Glass_012","Unisex_Head_Glass_013","Unisex_Head_Goggle_001","Unisex_Head_Goggle_002","Unisex_Head_Goggle_003","Unisex_Head_Goggle_004","Unisex_Head_Goggle_005","Unisex_Head_Goggle_006","Unisex_Head_Goggle_007","Unisex_Head_Decoration_00501","Unisex_Head_Decoration_00601","HeadSet","Unisex_Head_MaskMadMax","Unisex_Head_MaskFire_001","Unisex_Head_Mask_001","Unisex_Head_Mask_002","Unisex_Head_Mask_003","Unisex_Head_Mask_004","Unisex_Head_Mask_005","Unisex_Head_Mask_00701","Unisex_Head_Mask_00702","Unisex_Head_Mask_00703","Unisex_Head_Mask_008","Unisex_Head_Mask_00901","Unisex_Head_Mask_00902","Unisex_Head_MaskGreenBerets_001","Unisex_Head_Decoration_00101","Unisex_Head_Decoration_002","Unisex_Head_Decoration_003","Unisex_Head_Decoration_004","Unisex_Head_Earpods_Leisure_001"]},"m_bodyAccessory":{"attriValue":"Empty_Body","valueList":["Empty_Body","Male_AviatorScarf","Male_AviatorScarf_02","Male_AviatorScarf_03","Male_Zombies06_ChestSup","Unisex_Chest_LifeVest_01","Male_009Bag","Male_012Bag","Female_Chest_Hobo_002","Unisex_Body_BagLeisure_001","Male_AviatorBag","Male_MexicUkulele","Male_SpaceBag","Male_BaseballBag","Male_UniverBag","Male_WendigoBag","Unisex_Back_BackpackPolice_001","Unisex_Back_BackpackSki_001","Female_Back_BackpackSteam_001","Unisex_Chest_BackpackEnergy_001","Male_Zombies04Bag","Female_Zombies05Bag","Male_Zombies06Bag","Unisex_Chest_Backpack_00801","Unisex_Chest_Backpack_00901","Unisex_Chest_Backpack_01001","Unisex_Chest_Backpack_01101","Unisex_Chest_Backpack_01201","Unisex_Chest_ShoulderBag_00201","Unisex_Chest_ShoulderBag_00301","Unisex_Chest_ShoulderBag_00401","Unisex_Chest_ShoulderBag_00601","Male_Back_WingsElf_001","Male_Back_WingsUnicorn_001","Unisex_Back_BackpackCasual_001","Unisex_Chest_BagFire_001","Unisex_Chest_BackpackDiving_001","Female_Chest_OxygenDiving_001","Female_Chest_OxygenDiving_002","Male_BchestSup","Male_ComChestSup001","Male_ComChestSup002","Male_ComChestSup003","Unisex_Chest_FlakVestArmy_001","Unisex_Chest_FlakVest_ColaVending","Unisex_Chest_FlakVest_Chalkboard","Unisex_Chest_FlakVest_Light_00101","Unisex_Chest_FlakVest_Light_00102","Unisex_Chest_FlakVest_Pizzabox","Unisex_Chest_FlakVest_Recorder","Unisex_Chest_FlakVestStreetball_001","Unisex_Chest_FlakVestMadMax_001","Unisex_Chest_FlakVestMotor_001","Unisex_Chest_FlakVestGreenBerets_001","Unisex_Chest_FlakVestGreenBerets_002","Unisex_Chest_FlakVestSnow_01_001","LifeBuoy","Unisex_Pelvis_Lifebuoy_Duck_01","Unisex_Pelvis_Lifebuoy_Donut_01","Unisex_Pelvis_Lifebuoy_Donut_02","Unisex_Pelvis_Lifebuoy_Watermelon","Unisex_Pelvis_Lifebuoy_Tire","NutSabre","Male_Pelvis_Cowboy_GunBag","Unisex_BagWaste_002","Watch","Female_CasualWatch","Unisex_Hand_WatchDiving_001","Male_010Wrist","Female_CasualWrist","Male_IndiaSilkWrist","Male_SteamWrist","Male_011Wrist","Unisex_Arm_WristWaste_002","Unisex_Hand_WatchLeisure_01","Unisex_Hand_WatchSkater_01","Unisex_Hand_WristbandSkater_01","Unisex_Hand_WristbandSkater_002","Unisex_Hand_WristbandMadMax_01","Unisex_Hand_WristbandStreetball_01"]},"m_eyes":{"attriValue":"Default_Eyes_M","valueList":["Default_Eyes_M","Idle02_Eyes_M","Idle03_Eyes_M","Idle04_Eyes_M","Idle05_Eyes_M","Idle06_Eyes_M","Idle07_Eyes_M","Idle08_Eyes_M","Idle09_Eyes_M","Idle10_Eyes_M","Idle11_Eyes_M","Idle12_Eyes_M"]},"m_eyesColor":{"attriValue":"","valueList":["DefaultMale","Eyes_C_02","Eyes_C_03","Eyes_C_04","Eyes_C_05","Eyes_C_06","Eyes_C_07","Eyes_C_08","Eyes_C_09"]},"m_brows":{"attriValue":"Default_Eyebrow_M","valueList":["Default_Eyebrow_M","Idle02_Eyebrow_M","Idle03_Eyebrow_M","Idle04_Eyebrow_M","Idle05_Eyebrow_M","Idle06_Eyebrow_M","Idle07_Eyebrow_M","Idle08_Eyebrow_M","Idle09_Eyebrow_M","Idle10_Eyebrow_M","Idle11_Eyebrow_M","Idle12_Eyebrow_M"]},"m_nose":{"attriValue":"Default_Nose_M","valueList":["Default_Nose_M"]},"m_mouth":{"attriValue":"Default_Mouth_M","valueList":["Default_Mouth_M","Idle02_Mouth_M","Idle03_Mouth_M","Idle04_Mouth_M","Idle05_Mouth_M","Idle06_Mouth_M","Idle07_Mouth_M","Idle08_Mouth_M","Idle09_Mouth_M","Idle10_Mouth_M","Idle11_Mouth_M","Idle12_Mouth_M"]},"m_beard":{"attriValue":"Default_Beard_M","valueList":["Default_Beard_M","Beard_01_M","Beard_02_M"]},"m_faceDecoration":{"attriValue":"Default_FaceDecorate_M","valueList":["Default_FaceDecorate_M","Decoration_01_M","Decoration_02_M","Decoration_03_M","Decoration_04_M"]}}},{"id":20,"class":"sAnimationComponent","data":{}},{"id":25,"class":"sPlayerExpressionComponent","data":{}},{"id":45,"class":"sAnimationIKFullBodyComponent","data":{}},{"id":40,"class":"sPlayerModelInstanceRenderComponent","data":{}}]},{"class":"cBoneAnchor","name":"Bone_Head","guid":[1952377286,2257011431,2235437585,1990350708],"parentGuid":[2086577372,1035157785,2412732698,2224839101],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.0,1.3431,-0.0498],"m_localRotation":[0.5163,-0.4831,-0.5163,0.4831]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_Head"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_Head"}}]},{"class":"cBoneAnchor","name":"Bone_R_Hand","guid":[1365265308,2584495651,3179854900,2314059387],"parentGuid":[2086577372,1035157785,2412732698,2224839101],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.42,0.817,-0.0306],"m_localRotation":[-0.141,0.02,0.8559,0.497]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_R_Hand"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_R_Hand"}}]},{"class":"cBoneAnchor","name":"Bone_L_Hand","guid":[1001141281,105596195,2413995681,1572381856],"parentGuid":[2086577372,1035157785,2412732698,2224839101],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.42,0.817,-0.0306],"m_localRotation":[0.8559,0.497,-0.141,0.02]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_L_Hand"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_L_Hand"}}]},{"class":"cBoneAnchor","name":"Bone_Pelvis","guid":[3930266631,3765193548,2657671196,2444667291],"parentGuid":[2086577372,1035157785,2412732698,2224839101],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.0,0.786,-0.0675],"m_localRotation":[0.5,-0.5,-0.4999,0.4999]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_Pelvis"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_Pelvis"}}]},{"class":"cBoneAnchor","name":"Bone_R_Foot","guid":[1011560467,1551582414,3132691223,44035332],"parentGuid":[2086577372,1035157785,2412732698,2224839101],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.1584,0.1195,-0.1073],"m_localRotation":[0.5487,0.5487,0.4459,0.4459]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_R_Foot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_R_Foot"}}]},{"class":"cBoneAnchor","name":"Bone_L_Foot","guid":[3538847244,808075570,2480843790,1198870357],"parentGuid":[2086577372,1035157785,2412732698,2224839101],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-0.1584,0.1195,-0.1073],"m_localRotation":[0.4459,0.4459,0.5487,0.5487]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Bone_L_Foot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBoneAnchorComponent","data":{"m_boneName":"Bone_L_Foot"}}]},{"class":"cUiSurfaceUiObject","name":"NameGUI","guid":[1405111285,2384023431,3182972373,2500518680],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,2.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameGUI","m_active":false}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUISurfaceRenderComponent","data":{}},{"id":26,"class":"sUiSurfaceUiComponent","data":{"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_billboard":true,"m_size":[300.0,80.0],"m_disappearDistance":15,"m_originSize":[300.0,80.0]}}]},{"class":"cUiTextObject","name":"NameBar","guid":[2026945124,2380024573,3064606367,171005546],"parentGuid":[1405111285,2384023431,3182972373,2500518680],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameBar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":23,"class":"sUiTextComponent","data":{"m_addedSize":[300.0,80.0],"m_widgetSize":[300.0,80.0],"m_order":1,"m_anchor":"kAlignBottomLeft","m_finalSize":[300.0,80.0],"m_text":"","m_textColor":[1.0,1.0,1.0,1.0],"m_fontSize":32,"m_wrap":true}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiSurfaceUiObject","name":"HealthGUI","guid":[1362459126,1156792341,2681269783,824873225],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,2.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"HealthGUI","m_active":false}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUISurfaceRenderComponent","data":{}},{"id":26,"class":"sUiSurfaceUiComponent","data":{"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_billboard":true,"m_size":[160.0,80.0],"m_disappearDistance":15,"m_originSize":[160.0,80.0]}}]},{"class":"cUiImageObject","name":"Background","guid":[2692120497,1768836605,2660612515,4269796384],"parentGuid":[1362459126,1156792341,2681269783,824873225],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Background"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_addedSize":[160.0,31.0],"m_widgetSize":[160.0,31.0],"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_acceptRaycastWhenEdit":true,"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.0,0.0],"m_preAnchorsY":[0.0,0.0],"m_finalSize":[160.0,31.0],"m_imagePriSize":[136.0,28.0],"m_textureRef":{"m_guid":[2748549193,222842754,2941154731,726271496],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_imageColor":[1.0,1.0,1.0,0.9555],"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[1.0,1.0,1.0,5.6666]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiImageObject","name":"HealthBar","guid":[3177680961,308758981,2341371969,3691269346],"parentGuid":[2692120497,1768836605,2660612515,4269796384],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"HealthBar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_widgetSize":[144.0,12.3999],"m_pivot":[0.0,0.0],"m_anchorsX":[0.05,0.9499],"m_anchorsY":[0.3,0.6999],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_acceptRaycastWhenEdit":true,"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.05,0.9499],"m_preAnchorsY":[0.3,0.6999],"m_finalSize":[144.0,12.3999],"m_imagePriSize":[124.0,16.0],"m_textureRef":{"m_guid":[364921788,1323712570,2497125887,1146669227],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_imageType":"kSliced","m_fillAmount":0.0,"m_imageColor":[4.5625,1.0,3.1612,1.0],"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[15.9374,1.0,8.2258,1.0]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cScriptObject","name":"PlayerControlScript","guid":[1560065165,549536527,2196214773,3289613067],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerControlScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"-- 获取本地玩家\r\nlocal player = localPlayer\r\n\r\n--声明变量\r\nlocal isDead = false\r\nlocal forwardDir = Vector3.Forward\r\nlocal rightDir = Vector3.Right\r\nlocal finalDir = Vector3.Zero\r\nlocal horizontal = 0\r\nlocal vertical = 0\r\n\r\n-- 摄像机看向自己\r\nworld.CurrentCamera = player.Local.Independent.GameCamera\r\nlocal camera = world.CurrentCamera\r\nlocal mode = camera.CameraMode\r\ncamera.LookAt = player\r\n\r\n-- 手机端交互UI\r\nlocal gui = player.Local.ControlGUI\r\nlocal joystick = gui.Joystick\r\nlocal touchScreen = gui.TouchFigure\r\nlocal jumpButton = gui.JumpButton\r\n\r\n-- PC端交互按键\r\nlocal FORWARD_KEY = Enum.KeyCode.W\r\nlocal BACK_KEY = Enum.KeyCode.S\r\nlocal LEFT_KEY = Enum.KeyCode.A\r\nlocal RIGHT_KEY = Enum.KeyCode.D\r\nlocal JUMP_KEY = Enum.KeyCode.Space\r\n\r\n-- 键盘的输入值\r\nlocal moveForwardAxis = 0\r\nlocal moveBackAxis = 0\r\nlocal moveLeftAxis = 0\r\nlocal moveRightAxis = 0\r\n\r\n-- 移动方向是否遵循摄像机方向\r\nfunction IsFreeMode()\r\n\treturn (mode == Enum.CameraMode.Social and camera.Distance >= 0) or mode == Enum.CameraMode.Orbital \r\n\t\tor mode == Enum.CameraMode.Custom\r\nend\r\n\r\n--获取按键盘时的移动方向最终取值\r\nfunction GetKeyValue()\r\n\tmoveForwardAxis = Input.GetPressKeyData(FORWARD_KEY) > 0 and 1 or 0\r\n\tmoveBackAxis = Input.GetPressKeyData(BACK_KEY) > 0 and -1 or 0\r\n\tmoveLeftAxis = Input.GetPressKeyData(LEFT_KEY) > 0 and 1 or 0\r\n\tmoveRightAxis = Input.GetPressKeyData(RIGHT_KEY) > 0 and -1 or 0\r\n\tif player.State == Enum.CharacterState.Died then\r\n\t\tmoveForwardAxis, moveBackAxis, moveLeftAxis, moveRightAxis = 0, 0, 0, 0\r\n\tend\r\nend\r\n\r\n-- 获取移动方向\r\nfunction GetMoveDir()\r\n\tforwardDir = IsFreeMode() and camera.Forward or player.Forward \r\n\tforwardDir.y = 0\r\n\trightDir = Vector3(0, 1, 0):Cross(forwardDir)\r\n\thorizontal = joystick.Horizontal\r\n\tvertical = joystick.Vertical\r\n\tif horizontal ~= 0 or vertical ~= 0 then\r\n\t\tfinalDir = rightDir * horizontal + forwardDir * vertical\r\n\telse\r\n\t\tGetKeyValue()\r\n\t\tfinalDir = forwardDir * (moveForwardAxis + moveBackAxis) - rightDir * (moveLeftAxis + moveRightAxis)\r\n\tend\r\nend\r\n\r\n-- 移动逻辑\r\nfunction PlayerMove(dir)\r\n\tdir.y = 0\r\n\tif player.State == Enum.CharacterState.Died then\r\n\t\tdir = Vector3.Zero\r\n\tend\r\n\tif dir.Magnitude > 0 then\r\n\t\tif IsFreeMode() then\r\n\t\t\tplayer:FaceToDir(dir, 4 * math.pi)\r\n\t\tend\r\n\t\tplayer:MoveTowards(Vector2(dir.x, dir.z).Normalized)\r\n\telse\r\n\t\tplayer:MoveTowards(Vector2.Zero)\r\n\tend\r\nend\r\n\r\n-- 跳跃逻辑\r\nfunction PlayerJump()\r\n\tif (player.IsOnGround or player.State == Enum.CharacterState.Seated) and not isDead then\r\n\t\tplayer:Jump()\r\n\t\treturn\r\n\tend\t\r\nend\r\njumpButton.OnDown:Connect(PlayerJump)\r\nInput.OnKeyDown:Connect(function()\r\n\tif Input.GetPressKeyData(JUMP_KEY) == 1 then\r\n\t\tPlayerJump()\r\n\tend\r\nend)\r\n\r\n-- 死亡逻辑\r\nfunction PlayerDie()\r\n\tisDead = true\r\n\twait(player.RespawnTime)\r\n\tplayer:Reset()\r\n\tisDead = false\r\nend\r\nplayer.OnDead:Connect(PlayerDie)\r\n\r\n-- 生命值检测\r\nfunction HealthCheck(oldHealth, newHealth)\r\n\tif newHealth <= 0 then\r\n\t\tplayer:Die()\r\n\tend\r\nend\r\nplayer.OnHealthChange:Connect(HealthCheck)\r\n\r\n-- 每个渲染帧处理操控逻辑\r\nfunction MainControl()\r\n\tcamera = world.CurrentCamera\r\n\tmode = camera.CameraMode\r\n\tGetMoveDir()\r\n\tPlayerMove(finalDir)\r\nend\r\nworld.OnRenderStepped:Connect(MainControl)\r\n\r\n-- 滑屏转向\r\nfunction CameraMove(touchInfo)\r\n\tif #touchInfo == 1 then\r\n\t\tlocal deltapos = touchInfo[1].DeltaPosition\r\n\t\tif IsFreeMode() then\r\n\t\t\tcamera:CameraMove(mode == Enum.CameraMode.Orbital and Vector2(deltapos.x, 0) or deltapos)\r\n\t\telse \r\n\t\t\tworld.CurrentCamera.LookAt:Rotate(0, deltapos.x, 0) \r\n\t\t\tworld.CurrentCamera:CameraMove(Vector2(0, deltapos.y))\r\n\t\tend\r\n\tend\r\nend\r\ntouchScreen.OnTouched:Connect(CameraMove)\r\n\r\n-- 双指缩放摄像机距离\r\nfunction CameraZoom(pos1, pos2, dis, speed)\r\n\tif mode == Enum.CameraMode.Social then\r\n\t\tcamera.Distance = camera.Distance - dis / 50\r\n\tend\r\nend\r\ntouchScreen.OnPinchStay:Connect(CameraZoom)"}}]},{"class":"cScriptObject","name":"PlayerGUIScript","guid":[4094515156,1401045121,2425964011,2999181753],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerGUIScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"-- 获取本地玩家\r\nlocal player = localPlayer\r\n\r\n-- 姓名板\r\nlocal nameGUI = player.NameGUI\r\nnameGUI.NameBar.Text = player.Name\r\nnameGUI.LocalPosition = Vector3(0, player.Avatar.Height + 1.1, 0)\r\nlocal team = player:GetClosestTeam()\r\nif team and team.ClassName == 'Team' then\r\n\tnameGUI.NameBar.Color = team.TeamColor\r\nend\r\n\r\n-- 血条\r\nlocal healthGUI = player.HealthGUI\r\nlocal background = healthGUI.Background\r\nlocal healthBar = background.HealthBar\r\nlocal RED_BAR = ResourceManager.GetTexture(\"Internal/Blood_Red\")\r\nlocal GREEN_BAR = ResourceManager.GetTexture(\"Internal/Blood_Green\")\r\nlocal ORANGE_BAR = ResourceManager.GetTexture(\"Internal/Blood_Orange\")\r\n\r\n-- 姓名板的显示逻辑\r\nfunction NameBarLogic()\r\n\tnameGUI:SetActive(player.DisplayName)\r\nend\r\nplayer.OnDisplayNameChanged:Connect(NameBarLogic)\r\n\r\n-- 血条随生命值颜色改变而改变\r\nfunction healthChange(oldHealth, newHealth)\r\n\tlocal percent = player.Health / player.MaxHealth\r\n\tif player.HealthDisplayMode == Enum.HealthDisplayMode.OnHit then\r\n\t\thealthGUI:SetActive(percent < 1)\r\n\tend\r\n\tif percent >= 0.7 then\r\n\t\thealthBar.Texture = GREEN_BAR\r\n\telseif percent >= 0.3 then\r\n\t\thealthBar.Texture = ORANGE_BAR\r\n\telse\r\n\t\thealthBar.Texture = RED_BAR\r\n\tend\t\r\n\thealthBar.AnchorsX = Vector2(0.05, 0.9 * percent + 0.05)\r\nend\r\nplayer.OnHealthChange:Connect(healthChange)\r\nplayer.OnMaxHealthChanged:Connect(healthChange)\r\n\r\n-- 血条在各显示模式下的显示逻辑\r\nfunction HealthBarLogic()\r\n\tif player.HealthDisplayMode == Enum.HealthDisplayMode.Always then\r\n\t\thealthGUI:SetActive(true)\r\n\telseif player.HealthDisplayMode == Enum.HealthDisplayMode.Never then\r\n\t\thealthGUI:SetActive(false)\r\n\telseif player.HealthDisplayMode == Enum.HealthDisplayMode.OnHit then\r\n\t\thealthGUI:SetActive(player.Health ~= player.MaxHealth)\r\n\tend\r\nend\r\nplayer.OnHealthDisplayModeChanged:Connect(HealthBarLogic)\r\n\r\n--初始化姓名板和血条的显示\r\nNameBarLogic()\r\nHealthBarLogic()"}}]},{"class":"cBlackholeFolderObject","name":"Local","guid":[417325223,2932100337,2430726746,1418825083],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Local"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cUiScreenUiObject","name":"ControlGUI","guid":[2288685280,129189584,3004433564,697975946],"parentGuid":[417325223,2932100337,2430726746,1418825083],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ControlGUI"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIScreenRenderComponent","data":{}},{"id":26,"class":"sUiScreenUiComponent","data":{"m_widgetSize":[1920.0,1080.0],"m_order":1,"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0]}}]},{"class":"cUiFigureObject","name":"TouchFigure","guid":[2197565629,1415203114,2823922405,1734351976],"parentGuid":[2288685280,129189584,3004433564,697975946],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"TouchFigure"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":24,"class":"sUiFigureComponent","data":{"m_widgetSize":[2022.8007,1140.0649],"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,1.0],"m_anchorsY":[0.0,1.0],"m_anchor":"kAlignBottomLeft","m_anchorPercent":[0.0,0.0],"m_alignment":"kAlignBottomLeft","m_alignmentPercent":[0.0,0.0],"m_prePivot":[0.0,0.0],"m_preAnchorsX":[0.0,1.0],"m_preAnchorsY":[0.0,1.0],"m_finalSize":[2000.0001,1551.923],"m_bgColor":[1.0,1.0,1.0,0.0],"m_borderColor":[0.0,0.0,0.0,0.0]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiButtonObject","name":"JumpButton","guid":[102160580,854410432,2549292484,1202403965],"parentGuid":[2288685280,129189584,3004433564,697975946],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"JumpButton"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":26,"class":"sUiButtonComponent","data":{"m_addedSize":[200.0,200.0],"m_widgetSize":[205.7712,205.7712],"m_order":1,"m_anchorsX":[0.85,0.85],"m_anchorsY":[0.2,0.2],"m_anchor":"kAlignBottomLeft","m_alignment":"kAlignNone","m_alignmentPercent":[0.85,0.2],"m_acceptRaycastWhenEdit":true,"m_preAnchorsX":[0.85,0.85],"m_preAnchorsY":[0.2,0.2],"m_finalSize":[200.0,200.0],"m_image":{"m_guid":[1381378012,3623568531,2182762728,2959803675],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_fillAmount":0.0,"m_imageColor":[1.0196,1.0196,1.0196,1.0],"m_averageColor":[0.0,0.0,0.0,1.0],"m_averageColorReciprocal":[5.0,5.0,5.0,1.6776]}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiJoystickObject","name":"Joystick","guid":[214363713,4292497295,3028021729,2005335375],"parentGuid":[2288685280,129189584,3004433564,697975946],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Joystick"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":30,"class":"sUiJoystickComponent","data":{"m_widgetSize":[308.6568,308.6568],"m_order":2,"m_anchorsX":[0.2,0.2],"m_anchorsY":[0.2,0.2],"m_anchor":"kAlignTopLeft","m_alignment":"kAlignNone","m_alignmentPercent":[0.2,0.2],"m_preAnchorsX":[0.2,0.2],"m_preAnchorsY":[0.2,0.2],"m_finalSize":[300.0,300.0],"m_threshold":0.1,"m_workArea":[500.0,500.0],"m_backGround":{"m_guid":[1676341669,384255279,2994375601,539764901],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_handle":{"m_guid":[1309922238,2547074866,2257169120,2540834883],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_arrow":{"m_guid":[3072216954,3382394894,3198588415,2980353886],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false},"m_normalized":true}}]},{"class":"cIndependentObject","name":"Independent","guid":[2453424774,3327281782,3111155612,3452615377],"parentGuid":[417325223,2932100337,2430726746,1418825083],"components":[{"id":0,"class":"sIndependentTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Independent"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cCamera","name":"GameCamera","guid":[759347957,2245412439,2215380327,3955432270],"parentGuid":[2453424774,3327281782,3111155612,3452615377],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"GameCamera"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sCameraComponent","data":{"m_viewPortHeight":524,"m_viewPortWidth":920,"m_nearClip":0.0299}},{"id":11,"class":"sCameraRenderComponent","data":{}},{"id":20,"class":"sCameraBehaviorComponent","data":{"m_cameraMaxZoomDistance":50.0}},{"id":30,"class":"sAudioListenerComponent","data":{}}]},{"class":"cIndependentObject","name":"Independent","guid":[2035801620,2134724308,2629534182,769215545],"parentGuid":[821939657,2231651804,3205518288,3133023722],"components":[{"id":0,"class":"sIndependentTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Independent"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]}]},{"ObjectsLinker":[{"class":"cWorkspace","name":"World","guid":[1981988479,3555894,2597800867,69741929],"spaceId":"kDefaultSpace","objectType":0},{"class":"cWorkspace","name":"Global","guid":[344576033,1668630255,2683907297,2226597768],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"AutoAssignTeamScript","guid":[1988307774,2442019711,2592872571,1277204125],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"LuaFunctionScript","guid":[1414019724,4066527202,2188886684,1950800485],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"BTreeMainScript","guid":[2838117710,727861174,2541291470,2717323588],"spaceId":"kDefaultSpace","objectType":0},{"class":"cDataStoreObject","name":"DataStore","guid":[2838802579,436619052,2516973442,4240601818],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"BTreePlugin","guid":[2876989748,2457488097,2382853771,4121614769],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"JsonModule","guid":[2281794680,2200063571,3179761180,2263430375],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"B3Module","guid":[2550788250,2045660374,2765953421,1021477390],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ActionNodeModule","guid":[519411139,4154868052,2936069405,1497373262],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"CompositeNodeModule","guid":[3594053378,1655980454,2224855536,3599643798],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"ConditionNodeModule","guid":[834458622,841238893,3085535529,1118658168],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"DecoratorNodeModule","guid":[2362989191,2074755521,3218568945,2646351428],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"CustomNodeModule","guid":[1954964309,1422149872,2162306891,2839149325],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"BaseFloor","guid":[4211227124,399589691,2212667733,3335218667],"spaceId":"kDefaultSpace","objectType":0},{"class":"cFolderObject","name":"SpawnLocations","guid":[1803916521,3674621259,2355104850,441818688],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal00","guid":[362184257,1300644271,2169624314,2670603163],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal01","guid":[651144420,800934336,3039799213,1377036607],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal02","guid":[4009425966,1206468687,2439525561,4287493119],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStartPortal","name":"StartPortal03","guid":[3415283602,2930724749,3175953031,3420113780],"spaceId":"kDefaultSpace","objectType":0},{"class":"cAudioSource","name":"BGM","guid":[1596674502,2319271992,2900844459,2801180766],"spaceId":"kDefaultSpace","objectType":-842150451},{"class":"cSkydome","name":"Sky","guid":[3956874685,1991789763,3220541584,1456680764],"spaceId":"kDefaultSpace","objectType":-842150451},{"class":"cFolderObject","name":"Players","guid":[3397398191,850542637,3138524115,1333674022],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[718760084,1257915969,2962466066,2150526306],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[438081159,4019275113,2394302102,997050187],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[154289415,229392516,2254790969,287930189],"spaceId":"kDefaultSpace","objectType":0},{"class":"cTerrainObject","name":"Terrain","guid":[2381081137,2979483093,3156488065,1492146101],"spaceId":"kDefaultSpace","objectType":0},{"class":"cStaticSpaceFolderObject","name":"StaticSpace","guid":[1156127896,989415793,2817242198,3730054242],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPlayerInstance","name":"Npc","guid":[557654785,2380155339,3013303160,941967483],"spaceId":"kDefaultSpace","objectType":7143521},{"class":"cNpcAvatarInstance","name":"NpcAvatar","guid":[1231775529,3008252344,2697807223,2336561612],"spaceId":"kDefaultSpace","objectType":7143521},{"class":"cUiSurfaceUiObject","name":"NameGUI","guid":[1482332550,3394717746,2868581290,2295237364],"spaceId":"kDefaultSpace","objectType":7143521},{"class":"cUiTextObject","name":"NameBar","guid":[1764275455,3033613466,2672385125,3091238670],"spaceId":"kDefaultSpace","objectType":7143521},{"class":"cUiSurfaceUiObject","name":"HealthGUI","guid":[495557931,550323791,2284508679,1151179311],"spaceId":"kDefaultSpace","objectType":0},{"class":"cUiImageObject","name":"Background","guid":[1571337247,4276506147,2618749879,1933113932],"spaceId":"kDefaultSpace","objectType":7143521},{"class":"cUiImageObject","name":"HealthBar","guid":[2095581018,4193992826,3180616627,2874037211],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"NpcMgrModule","guid":[2200592614,732054892,2510412088,3573524482],"spaceId":"kDefaultSpace","objectType":0},{"class":"cModuleScriptObject","name":"NpcAiFuncModule","guid":[2438489667,650331335,3006900329,2568461899],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"NpcMainScript","guid":[1516425449,617956124,2567249954,579591995],"spaceId":"kDefaultSpace","objectType":0},{"class":"cScriptObject","name":"PlayerGUIScript","guid":[1672903388,596460199,2820999280,642118727],"spaceId":"kDefaultSpace","objectType":0},{"class":"cPrimitiveObject","name":"Sphere","guid":[2367310542,290605948,2615944327,1917812362],"spaceId":"kDefaultSpace","objectType":0}],"ObjectsData":[{"class":"cWorkspace","name":"World","guid":[1981988479,3555894,2597800867,69741929],"parentGuid":[0,0,0,0],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"World"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sWorkspaceComponent","data":{}},{"id":11,"class":"sConfigPhysicsComponent","data":{"m_collisionGroupMaskFlags":[0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]},{"class":"cWorkspace","name":"Global","guid":[344576033,1668630255,2683907297,2226597768],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Global"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sWorkspaceComponent","data":{}},{"id":11,"class":"sConfigPhysicsComponent","data":{"m_collisionGroupMaskFlags":[0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}}]},{"class":"cScriptObject","name":"AutoAssignTeamScript","guid":[1988307774,2442019711,2592872571,1277204125],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"AutoAssignTeamScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"function autoAssign()\r\n    local container = world:FindTeams()\r\n    local min = 1\r\n    local teamTojoin = {}\r\n    for i = 1, #container, 1 do\r\n        if container[i].CurrentMaxMemberNum > 0 then\r\n            temp = container[i].CurrentMemberNum / (container[i].CurrentMaxMemberNum)\r\n            if (temp < min and temp ~= 1) then\r\n                teamTojoin = {}\r\n                min = temp\r\n                table.insert(teamTojoin, container[i])\r\n            elseif temp == min and temp ~= 1 then\r\n                table.insert(teamTojoin, container[i])\r\n            end\r\n        end\r\n    end\r\n    local a = 1\r\n    if #teamTojoin > 0 then\r\n        a = math.random(1, #teamTojoin)\r\n        return teamTojoin[a]\r\n    else\r\n        return nil\r\n    end\r\nend\r\n"}}]},{"class":"cScriptObject","name":"LuaFunctionScript","guid":[1414019724,4066527202,2188886684,1950800485],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"LuaFunctionScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"--- 提供一组常用函数，以及对 Lua 标准库的扩展\r\n-- @script Lua function extension libraries\r\n-- @author Lilith Games, Avatar Team\r\n-- @see https://wiki.lilithgames.com/x/tSkMAg\r\n\r\n--- 检查并尝试转换为数值，如果无法转换则返回 0\r\n-- @param mixed value 要检查的值\r\n-- @param [integer base] 进制，默认为十进制\r\n-- @return number\r\nfunction checknumber(value, base)\r\n    return tonumber(value, base) or 0\r\nend\r\n\r\n--- 检查是否是有效的number类型\r\n-- @param number\r\nfunction isValidNumber(num)\r\n    return num ~= nil and num\r\nend\r\n\r\n--- 检查并尝试转换为整数，如果无法转换则返回 0\r\n-- @param mixed value 要检查的值\r\n-- @return integer\r\nfunction checkint(value)\r\n    return math.round(checknumber(value))\r\nend\r\n\r\n--- 检查并尝试转换为布尔值，除了 nil 和 false，其他任何值都会返回 true\r\n-- @param mixed value 要检查的值\r\n-- @return boolean\r\nfunction checkbool(value)\r\n    return (value ~= nil and value ~= false)\r\nend\r\n\r\n--- 检查值是否是一个表格，如果不是则返回一个空表格\r\n-- @param mixed value 要检查的值\r\n-- @return table\r\nfunction checktable(value)\r\n    if type(value) ~= 'table' then\r\n        value = {}\r\n    end\r\n    return value\r\nend\r\n\r\n--- 处理对象\r\n-- @param mixed obj Lua 对象\r\n-- @param function method 对象方法\r\n-- @return function\r\nfunction handler(obj, method)\r\n    return function(...)\r\n        return method(obj, ...)\r\n    end\r\nend\r\n\r\n--- 计算表格包含的字段数量\r\n-- Lua table 的 \"#\" 操作只对依次排序的数值下标数组有效，table.nums() 则计算 table 中所有不为 nil 的值的个数。\r\n-- @param table\r\nfunction table.nums(t)\r\n    if t == nil then\r\n        return 0\r\n    end\r\n    local count = 0\r\n    for _ in pairs(t) do\r\n        count = count + 1\r\n    end\r\n    return count\r\nend\r\n\r\n--- 返回指定表格中的所有键\r\n-- @param k-v table\r\n-- @return keys' table\r\n-- @usage example\r\n-- local hashtable = {a = 1, b = 2, c = 3}\r\n-- local keys = table.keys(hashtable)\r\n-- >> keys = {\"a\", \"b\", \"c\"}\r\nfunction table.keys(hashtable)\r\n    local keys = {}\r\n    for k, _ in pairs(hashtable) do\r\n        table.insert(keys, k)\r\n    end\r\n    return keys\r\nend\r\n\r\n--- 返回指定表格中的所有值\r\n-- @param k-v table\r\n-- @return values' table\r\n-- @usage example\r\n-- local hashtable = {a = 1, b = 2, c = 3}\r\n-- local values = table.values(hashtable)\r\n-- >> values = {1, 2, 3}\r\nfunction table.values(hashtable)\r\n    local values = {}\r\n    local i = 1\r\n    for k, v in pairs(hashtable) do\r\n        values[i] = v\r\n        i = i + 1\r\n    end\r\n    return values\r\nend\r\n\r\n--- 将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值\r\n-- @param target table\r\n-- @param source table\r\n-- @usage example\r\n-- local dest = {a = 1, b = 2}\r\n-- local src  = {c = 3, d = 4}\r\n-- table.merge(dest, src)\r\n-- >> dest = {a = 1, b = 2, c = 3, d = 4}\r\nfunction table.merge(dest, src)\r\n    for k, v in pairs(src) do\r\n        dest[k] = v\r\n    end\r\nend\r\n\r\n--- 深度将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值,如果存在子表,则遍历子表进行复制\r\nfunction table.deepMerge(dest, src)\r\n    for k, v in pairs(src) do\r\n        if type(v) == 'table' then\r\n            if dest[k] == nil then\r\n                dest[k] = {}\r\n            end\r\n            table.deepMerge(dest[k], v)\r\n        else\r\n            dest[k] = v\r\n        end\r\n    end\r\nend\r\n\r\n--- 将来源表格中所有键及其值复制到目标表格对象中，如果存在同名键，则覆盖其值\r\n-- @param ... 多个表，第一个是目标表格\r\n-- @return 返回一个新表\r\n---@author Sharif Ma\r\nfunction table.MergeTables(...)\r\n    local tabs = {...}\r\n    if not tabs or #tabs == 0 then\r\n        return {}\r\n    end\r\n    local origin = {}\r\n    for k, v in pairs(tabs[1]) do\r\n        origin[k] = v\r\n    end\r\n    for i = 2, #tabs do\r\n        if origin then\r\n            if tabs[i] then\r\n                for _, v in pairs(tabs[i]) do\r\n                    table.insert(origin, v)\r\n                end\r\n            end\r\n        else\r\n            origin = tabs[i]\r\n        end\r\n    end\r\n    return origin\r\nend\r\n\r\n--- 在目标表格的指定位置插入来源表格，如果没有指定位置则连接两个表格\r\n-- @param target table\r\n-- @param source table\r\n-- @param start index\r\n-- @usage example #1\r\n-- local dest = {1, 2, 3}\r\n-- local src  = {4, 5, 6}\r\n-- table.insertto(dest, src)\r\n-- >> dest = {1, 2, 3, 4, 5, 6}\r\n-- @usage example #2\r\n-- local dest = {1, 2, 3}\r\n-- local src  = {4, 5, 6}\r\n-- table.insertto(dest, src, 5)\r\n-- >> dest = {1, 2, 3, nil, 4, 5, 6}\r\nfunction table.insertto(dest, src, begin)\r\n    if begin == nil then\r\n        begin = #dest + 1\r\n    else\r\n        begin = checkint(begin)\r\n        if begin <= 0 then\r\n            begin = #dest + 1\r\n        end\r\n    end\r\n\r\n    local len = #src\r\n    for i = 0, len - 1 do\r\n        dest[i + begin] = src[i + 1]\r\n    end\r\nend\r\n\r\n--- 从表格中查找指定值，返回其索引，如果没找到返回 false\r\n-- @param array table\r\n-- @param target value\r\n-- @param start index\r\n-- @return index or false\r\n-- @usage example\r\n-- local array = {\"a\", \"b\", \"c\"}\r\n-- print(table.indexof(array, \"b\"))\r\n-- >> 2\r\nfunction table.indexof(array, value, begin)\r\n    if array ~= nil then\r\n        for i = begin or 1, #array do\r\n            if array[i] == value then\r\n                return i\r\n            end\r\n        end\r\n    end\r\n    return 0\r\nend\r\n\r\n--- 检查表格中是否存在指定值\r\n-- @param array table\r\n-- @param target value\r\n-- @return @boolean\r\nfunction table.exists(array, value)\r\n    return table.indexof(array, value) > 0\r\nend\r\n\r\n--- 清空数组表格\r\n-- @param array table\r\nfunction table.cleararray(array)\r\n    if array ~= nil then\r\n        local count = #array\r\n        while count > 0 do\r\n            table.remove(array, count)\r\n            count = #array\r\n        end\r\n    end\r\nend\r\n\r\n--- 清空k-v表格\r\n-- @param k-v table\r\nfunction table.clearhashtable(hashtable)\r\n    if hashtable ~= nil then\r\n        for k, v in pairs(hashtable) do\r\n            hashtable[k] = nil\r\n        end\r\n    end\r\nend\r\n\r\n--- 清空表格\r\n-- @param table\r\n-- @see table.clearhashtable\r\nfunction table.cleartable(t)\r\n    table.clearhashtable(t)\r\nend\r\n\r\n--- 截取Array其中一段，startIndex从1开始 return截取后的新数组\r\n-- @param table array table\r\n-- @param @number start index\r\n-- @param @number length\r\n-- @return @table array table\r\n-- @usage example\r\n-- local array = {\"a\", \"b\", \"c\", \"d\"}\r\n-- print(table.subArray(array, 2, 2))\r\n-- >> {\"b\", \"c\"}\r\nfunction table.subArray(array, startIndex, length)\r\n    if array ~= nil then\r\n        local count = table.nums(array)\r\n        local tempArray = array\r\n        array = {}\r\n        if startIndex <= count then\r\n            local maxlength = count - startIndex + 1\r\n            length = length > maxlength and maxlength or length\r\n            local endIndex = startIndex + length - 1\r\n            for i = startIndex, endIndex do\r\n                table.insert(array, tempArray[i])\r\n            end\r\n        end\r\n    end\r\n    return array\r\nend\r\n\r\n--- 截取Array的后半段，startIndex从1开始 return截取后的新数组\r\n-- @param table array table\r\n-- @param @number start index\r\n-- @return @table array table\r\nfunction table.subArrayByStartIndex(array, startIndex)\r\n    if array ~= nil then\r\n        local count = table.nums(array)\r\n        local length = count - startIndex + 1\r\n        return table.subArray(array, startIndex, length)\r\n    end\r\n    return array\r\nend\r\n\r\n--- 从表格中查找指定值，返回其 key，如果没找到返回 nil\r\n-- @param table hash table\r\n-- @param any value\r\n-- @return key of value\r\n-- @usage\r\n-- local hashtable = {name = \"dualface\", comp = \"chukong\"}\r\n-- print(table.keyof(hashtable, \"chukong\"))\r\n-- >> comp\r\nfunction table.keyof(hashtable, value)\r\n    for k, v in pairs(hashtable) do\r\n        if v == value then\r\n            return k\r\n        end\r\n    end\r\n    return nil\r\nend\r\n\r\n--- 从表格中删除指定值，返回删除的值的个数\r\n-- @usage\r\n-- local array = {\"a\", \"b\", \"c\", \"c\"}\r\n-- print(table.removebyvalue(array, \"c\", true))\r\n-- >> 输出 2\r\nfunction table.removebyvalue(array, value, removeall)\r\n    local c, i, max = 0, 1, #array\r\n    while i <= max do\r\n        if array[i] == value then\r\n            table.remove(array, i)\r\n            c = c + 1\r\n            i = i - 1\r\n            max = max - 1\r\n            if not removeall then\r\n                break\r\n            end\r\n        end\r\n        i = i + 1\r\n    end\r\n    return c\r\nend\r\n\r\n--- 数组混淆\r\nfunction table.shuffle(_tbl)\r\n    local j\r\n    for i = #_tbl, 2, -1 do\r\n        j = math.random(i)\r\n        _tbl[i], _tbl[j] = _tbl[j], _tbl[i]\r\n    end\r\n    return _tbl\r\nend\r\n\r\n--- 对表格中每一个值执行一次指定的函数，并用函数返回值更新表格内容\r\n-- @param table\r\n-- @param function fn 参数指定的函数具有两个参数，并且返回一个值。原型如下：\r\n-- function map_function(value, key)\r\n--     return value\r\n-- end\r\n-- @usage\r\n-- local t = {name = \"dualface\", comp = \"chukong\"}\r\n-- table.map(t, function(v, k)\r\n--    -- 在每一个值前后添加括号\r\n--    return \"[\" .. v .. \"]\"\r\n-- end)\r\n-- 输出修改后的表格内容\r\n-- for k, v in pairs(t) do\r\n--     print(k, v)\r\n-- end\r\n-- >> 输出\r\n-- name [dualface]\r\n-- comp [chukong]\r\nfunction table.map(t, fn)\r\n    for k, v in pairs(t) do\r\n        t[k] = fn(v, k)\r\n    end\r\nend\r\n\r\n--- 对表格中每一个值执行一次指定的函数，但不改变表格内容\r\n-- @param table\r\n-- @param function fn 参数指定的函数具有两个参数，没有返回值。原型如下：\r\n-- function map_function(value, key)\r\n--     -- no return here\r\n-- end\r\n-- @usage\r\n-- local t = {name = \"dualface\", comp = \"chukong\"}\r\n-- table.walk(t, function(v, k)\r\n--     -- 输出每一个值\r\n--     print(v)\r\n-- end)\r\nfunction table.walk(t, fn)\r\n    for k, v in pairs(t) do\r\n        fn(v, k)\r\n    end\r\nend\r\n\r\n--- 对表格中每一个值执行一次指定的函数，如果该函数返回 false，则对应的值会从表格中删除\r\n-- @param table\r\n-- @param function fn 参数指定的函数具有两个参数，并且返回一个 boolean 值。原型如下：\r\n-- !!!!该方法有局限性，执行后会修改原表格t中值\r\n-- function map_function(value, key)\r\n--     return true or false\r\n-- end\r\n-- @usage\r\n-- local t = {name = \"dualface\", comp = \"chukong\"}\r\n-- table.filter(t, function(v, k)\r\n--     return v ~= \"dualface\" -- 当值等于 dualface 时过滤掉该值\r\n-- end)\r\n-- 输出修改后的表格内容\r\n-- for k, v in pairs(t) do\r\n--     print(k, v)\r\n-- end\r\n-- >> 输出 comp chukong\r\nfunction table.filter(t, fn)\r\n    for k, v in pairs(t) do\r\n        if not fn(v, k) then\r\n            t[k] = nil\r\n        end\r\n    end\r\nend\r\n\r\n--- 找到表格中每个符合matchFunc的条目\r\n-- @param array table\r\n-- @param match function, return T/F\r\n-- @return all elements matched, default is {}\r\nfunction table.findAll(array, matchFunc)\r\n    local ret, idx = {}, 1\r\n    for i = 1, #array do\r\n        if matchFunc(array[i]) then\r\n            ret[idx] = array[i]\r\n            idx = idx + 1\r\n        end\r\n    end\r\n    return ret\r\nend\r\n\r\n--- 找到表格中每个符合matchFunc的条目，并执行walkFunc\r\n-- @param array table\r\n-- @param match function, return T/F\r\n-- @param walk function\r\nfunction table.findAllAndWalk(array, matchFunc, walkFunc)\r\n    for i = 1, #array do\r\n        if matchFunc(array[i]) then\r\n            walkFunc(array[i])\r\n        end\r\n    end\r\nend\r\n\r\n--- 在表格中插入一个新值\r\n-- @param array table\r\n-- @param new element\r\nfunction table.insert_once(T, elem)\r\n    for _, v in ipairs(T) do\r\n        if v == elem then\r\n            return\r\n        end\r\n    end\r\n    table.insert(T, elem)\r\nend\r\n\r\n--- 遍历表格，确保其中的值唯一\r\n-- @function [parent=#table] unique\r\n-- @param table t 表格\r\n-- @param boolean bArray t是否是数组,是数组,t中重复的项被移除后,后续的项会前移\r\n-- @return table#table  包含所有唯一值的新表格\r\n-- @usage\r\n-- 遍历表格，确保其中的值唯一\r\n-- local t = {\"a\", \"a\", \"b\", \"c\"} -- 重复的 a 会被过滤掉\r\n-- local n = table.unique(t)\r\n-- for k, v in pairs(n) do\r\n--     print(v)\r\n-- end\r\n-- >> 输出 a b c\r\nfunction table.unique(t, bArray)\r\n    local check = {}\r\n    local n = {}\r\n    local idx = 1\r\n    for k, v in pairs(t) do\r\n        if not check[v] then\r\n            if bArray then\r\n                n[idx] = v\r\n                idx = idx + 1\r\n            else\r\n                n[k] = v\r\n            end\r\n            check[v] = true\r\n        end\r\n    end\r\n    return n\r\nend\r\n\r\n--- table 深度复制\r\n-- @param table\r\n-- @return a net table with same data\r\nfunction table.deepcopy(object)\r\n    local lookup_table = {}\r\n    local function _copy(object)\r\n        if type(object) ~= 'table' then\r\n            return object\r\n        elseif lookup_table[object] then\r\n            return lookup_table[object]\r\n        end\r\n        local new_table = {}\r\n        lookup_table[object] = new_table\r\n        for key, value in pairs(object) do\r\n            new_table[_copy(key)] = _copy(value)\r\n        end\r\n        return setmetatable(new_table, getmetatable(object))\r\n    end\r\n    return _copy(object)\r\nend\r\n\r\n--- table 浅度复制(不处理metatable)\r\nfunction table.shallowcopy(orig)\r\n    local orig_type = type(orig)\r\n    local copy\r\n    if orig_type == 'table' then\r\n        copy = {}\r\n        for orig_key, orig_value in next, orig, nil do\r\n            copy[table.shallowcopy(orig_key)] = table.shallowcopy(orig_value)\r\n        end\r\n    else\r\n        copy = orig\r\n    end\r\n    return copy\r\nend\r\n\r\n--- 获取or创建一个子表\r\nfunction table.need(tb, key)\r\n    if type(tb) == 'table' then\r\n        local subTb = tb[key]\r\n        if subTb == nil then\r\n            subTb = {}\r\n            tb[key] = subTb\r\n        end\r\n        return subTb\r\n    end\r\n    return\r\nend\r\n\r\n--- 打印table中的所有内容\r\n-- @param data table\r\n-- @param @boolean showMetatable 是否显示元表\r\nfunction table.dump(data, showMetatable)\r\n    local result, tab = {}, '    '\r\n    local function _dump(data, showMetatable, lastCount)\r\n        if type(data) ~= 'table' then\r\n            if type(data) == 'string' then\r\n                table.insert(result, '\"')\r\n                table.insert(result, data)\r\n                table.insert(result, '\"')\r\n            else\r\n                table.insert(result, tostring(data))\r\n            end\r\n        else\r\n            --Format\r\n            local count = lastCount or 0\r\n            count = count + 1\r\n            table.insert(result, '{\\n')\r\n            --Metatable\r\n            if showMetatable then\r\n                for i = 1, count do\r\n                    table.insert(result, tab)\r\n                end\r\n                local mt = getmetatable(data)\r\n                table.insert(result, '\"__metatable\" = ')\r\n                _dump(mt, showMetatable, count)\r\n                table.insert(result, ',\\n')\r\n            end\r\n            --Key\r\n            for key, value in pairs(data) do\r\n                for i = 1, count do\r\n                    table.insert(result, tab)\r\n                end\r\n                if type(key) == 'string' then\r\n                    table.insert(result, '\"')\r\n                    table.insert(result, key)\r\n                    table.insert(result, '\" = ')\r\n                elseif type(key) == 'number' then\r\n                    table.insert(result, '[')\r\n                    table.insert(result, key)\r\n                    table.insert(result, '] = ')\r\n                else\r\n                    table.insert(result, tostring(key))\r\n                end\r\n                _dump(value, showMetatable, count)\r\n                table.insert(result, ',\\n')\r\n            end\r\n            --Format\r\n            for i = 1, lastCount or 0 do\r\n                table.insert(result, tab)\r\n            end\r\n            table.insert(result, '}')\r\n        end\r\n        --Format\r\n        if not lastCount then\r\n            table.insert(result, '\\n')\r\n        end\r\n    end\r\n    _dump(data, showMetatable, 0)\r\n\r\n    -- print('dump: \\n' .. table.concat(result))\r\n    return 'dump: \\n' .. table.concat(result)\r\nend\r\n\r\n--- 用指定字符或字符串分割输入字符串，返回包含分割结果的数组\r\n-- @param @string input 输入的字符串\r\n-- @param @string delimiter 分隔符\r\n-- @return array\r\n-- @usage example #1\r\n-- local input = \"Hello,World\"\r\n-- local res = string.split(input, \",\")\r\n-- >> res = {\"Hello\", \"World\"}\r\n-- @usage example #2\r\n-- local input = \"Hello-+-World-+-Quick\"\r\n-- local res = string.split(input, \"-+-\")\r\n-- >> res = {\"Hello\", \"World\", \"Quick\"}\r\nfunction string.split(input, delimiter)\r\n    input = tostring(input)\r\n    delimiter = tostring(delimiter)\r\n    if (delimiter == '') then\r\n        return false\r\n    end\r\n    local pos, arr = 0, {}\r\n    -- for each divider found\r\n    for st, sp in function()\r\n        return string.find(input, delimiter, pos, true)\r\n    end do\r\n        table.insert(arr, string.sub(input, pos, st - 1))\r\n        pos = sp + 1\r\n    end\r\n    table.insert(arr, string.sub(input, pos))\r\n    return arr\r\nend\r\n\r\n--- 判断字符串是否为空或者长度为零\r\n-- @param @string 输入的字符串\r\nfunction string.isnilorempty(inputStr)\r\n    return inputStr == nil or inputStr == ''\r\nend\r\n\r\n--- 去除输入字符串头部的空白字符，返回结果\r\n-- @param @string input\r\n-- @return @string\r\n-- @usage example\r\n-- local input = \"  ABC\"\r\n-- print(string.ltrim(input))\r\n-- >> 输出 ABC，输入字符串前面的两个空格被去掉了\r\n-- 空白字符包括：\r\n-- -   空格\r\n-- -   制表符 \\t\r\n-- -   换行符 \\n\r\n-- -   回到行首符 \\r\r\nfunction string.ltrim(input)\r\n    return string.gsub(input, '^[ \\t\\n\\r]+', '')\r\nend\r\n\r\n--- 去除输入字符串尾部的空白字符，返回结果\r\n-- @param @string input\r\n-- @return @string\r\n-- @usage example\r\n-- local input = \"ABC  \"\r\n-- print(string.rtrim(input))\r\n-- >> 输出 ABC，输入字符串最后的两个空格被去掉了\r\nfunction string.rtrim(input)\r\n    return string.gsub(input, '[ \\t\\n\\r]+$', '')\r\nend\r\n\r\n--- 去掉字符串首尾的空白字符，返回结果\r\n-- @param @string input\r\n-- @return @string\r\nfunction string.trim(input)\r\n    input = string.gsub(input, '^[ \\t\\n\\r]+', '')\r\n    return string.gsub(input, '[ \\t\\n\\r]+$', '')\r\nend\r\n\r\n--- 将字符串的第一个字符转为大写，返回结果\r\n-- @param @string input\r\n-- @return @string\r\n-- @usage example\r\n-- local input = \"hello\"\r\n-- print(string.ucfirst(input))\r\n-- >> 输出 Hello\r\nfunction string.ucfirst(input)\r\n    return string.upper(string.sub(input, 1, 1)) .. string.sub(input, 2)\r\nend\r\n\r\nfunction string.firstToUpper(str)\r\n    return (str:gsub('^%l', string.upper))\r\nend\r\n\r\n--- 计算 UTF8 字符串的长度，每一个中文算一个字符\r\n-- @param @string input\r\n-- @return @number cnt\r\n-- @usage example\r\n-- local input = \"你好World\"\r\n-- print(string.utf8len(input))\r\n-- >> 输出 7\r\nfunction string.utf8len(input)\r\n    local len = string.len(input)\r\n    local left = len\r\n    local cnt = 0\r\n    local arr = {0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc}\r\n    while left ~= 0 do\r\n        local tmp = string.byte(input, -left)\r\n        local i = #arr\r\n        while arr[i] do\r\n            if tmp >= arr[i] then\r\n                left = left - i\r\n                break\r\n            end\r\n            i = i - 1\r\n        end\r\n        cnt = cnt + 1\r\n    end\r\n    return cnt\r\nend\r\n\r\n--- 替换字符串内容\r\n-- @param @string input\r\n-- @param @number start index\r\n-- @param new context\r\n-- @return a new string\r\nfunction string.replace(str, index, char)\r\n    return table.concat {str:sub(1, index - 1), char, str:sub(index + 1)}\r\nend\r\n\r\n--- 检查字符串是否为指定字符串开头\r\n-- @param @string target\r\n-- @param @string start\r\n-- @return @boolean\r\nfunction string.startswith(str, start)\r\n    return str:sub(1, #start) == start\r\nend\r\n\r\n--- 检查字符串是否以指定字符串结尾\r\n-- @param @string target\r\n-- @param @string start\r\n-- @return @boolean\r\nfunction string.endswith(str, ending)\r\n    return ending == '' or str:sub(-(#ending)) == ending\r\nend\r\n\r\n--- 四舍五入\r\n-- @param a number\r\n-- @return a round number\r\nfunction math.round(value)\r\n    return math.floor(value + 0.5)\r\nend\r\n\r\n--- [0, 1]区间限定函数\r\n-- @param a number\r\n-- @return a clamped number\r\nfunction math.clamp01(value)\r\n    return math.min(1, math.max(0, value))\r\nend\r\n\r\n---最小数值和最大数值指定返回值的范围\r\n-- @param a number\r\n-- @param min threshold\r\n-- @param max threshold\r\n-- @return a clamped number\r\nfunction math.Clamp(value, min, max)\r\n    if value < min then\r\n        return min\r\n    end\r\n    if value > max then\r\n        return max\r\n    end\r\n    return value\r\nend\r\n\r\n--- 高斯岁间变量\r\nfunction math.GaussRandom()\r\n    local u = math.random()\r\n    local v = math.random()\r\n    local z = math.sqrt(-2 * math.log(u)) * math.cos(2 * math.pi * v)\r\n    z = (z + 3) / 6\r\n    z = 2 * z - 1\r\n    if (math.abs(z) > 1) then\r\n        return math.GaussRandom()\r\n    end\r\n    return z\r\nend\r\n\r\n--- 数据结构 队列\r\n-- @usage queue example\r\n-- local myQueue = Queue:New()\r\n-- myQueue:Enqueue('a')\r\n-- myQueue:Enqueue('b')\r\n-- myQueue:Enqueue('c')\r\n-- myQueue:PrintElement()\r\n-- print(myQueue:Dequeue())\r\n-- myQueue:PrintElement()\r\n-- myQueue:Clear()\r\n-- myQueue:PrintElement()\r\nQueue = {}\r\nfunction Queue:New()\r\n    local inst = {\r\n        _first = -1,\r\n        _last = -1,\r\n        _size = 0,\r\n        _queue = {}\r\n    }\r\n    setmetatable(inst, {__index = self})\r\n    return inst\r\nend\r\n\r\nfunction Queue:IsEmpty()\r\n    if self._size == 0 then\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\nfunction Queue:Enqueue(inElement)\r\n    if self._size == 0 then\r\n        self._first = 0\r\n        self._last = 1\r\n        self._size = 1\r\n        self._queue[self._last] = inElement\r\n    else\r\n        self._last = self._last + 1\r\n        self._queue[self._last] = inElement\r\n        self._size = self._size + 1\r\n    end\r\nend\r\n\r\nfunction Queue:Dequeue()\r\n    if self:IsEmpty() then\r\n        print('Error: the queue is empty')\r\n        return\r\n    end\r\n    self._size = self._size - 1\r\n    self._first = self._first + 1\r\n    local value = self._queue[self._first]\r\n    return value\r\nend\r\n\r\nfunction Queue:Clear()\r\n    self._queue = nil\r\n    self._queue = {}\r\n    self._size = 0\r\n    self._first = -1\r\n    self._last = -1\r\nend\r\n\r\nfunction Queue:Size()\r\n    return self._size or 0\r\nend\r\n\r\nfunction Queue:PrintElement()\r\n    if self._size == 0 then\r\n        print('{}')\r\n    else\r\n        local f = self._first + 1\r\n        local l = self._last\r\n        local str\r\n        local flag = true\r\n        while f ~= l do\r\n            if flag == true then\r\n                str = '{' .. tostring(self._queue[f])\r\n                f = f + 1\r\n                flag = false\r\n            else\r\n                str = str .. ',' .. tostring(self._queue[f])\r\n                f = f + 1\r\n            end\r\n        end\r\n        str = str .. ',' .. tostring(self._queue[l]) .. '}'\r\n        print(str)\r\n    end\r\nend\r\n\r\nfunction Queue:GetValue(index)\r\n    if self:IsEmpty() or index == nil or index == 0 then\r\n        print('Error: Get Value Failure!')\r\n        return\r\n    end\r\n    if index > 0 then\r\n        return self._queue[self._first + index]\r\n    else\r\n        return self._queue[self._last + index + 1]\r\n    end\r\nend\r\n\r\nfunction Queue:GetValues()\r\n    if self:IsEmpty() then\r\n        return\r\n    end\r\n    local data = {}\r\n    for i = self._first + 1, self._last, 1 do\r\n        data[#data + 1] = self._queue[i]\r\n    end\r\n    return data\r\nend\r\n\r\n--- 数据结构 栈\r\n-- @usage example\r\n-- local myStack = Stack:New()\r\n-- myStack:Push(\"a\")\r\n-- myStack:Push(\"b\")\r\n-- myStack:Push(\"c\")\r\n-- myStack:PrintElement()\r\n-- print(myStack:Pop())\r\n-- myStack:PrintElement()\r\n-- myStack:Clear()\r\n-- myStack:PrintElement()\r\nStack = {}\r\nfunction Stack:New()\r\n    local inst = {\r\n        _last = 0,\r\n        _stack = {}\r\n    }\r\n    setmetatable(inst, {__index = self})\r\n\r\n    return inst\r\nend\r\n\r\nfunction Stack:IsEmpty()\r\n    if self._last == 0 then\r\n        return true\r\n    end\r\n    return false\r\nend\r\n\r\nfunction Stack:Push(inElement)\r\n    self._last = self._last + 1\r\n    self._stack[self._last] = inElement\r\nend\r\n\r\nfunction Stack:Pop()\r\n    if self:IsEmpty() then\r\n        --print(\"Error: the stack is empty\")\r\n        return\r\n    end\r\n    local value = self._stack[self._last]\r\n    self._stack[self._last] = nil\r\n    self._last = self._last - 1\r\n    return value\r\nend\r\n\r\nfunction Stack:Exists(element, compairFunc)\r\n    if compairFunc == nil then\r\n        compairFunc = function(a, b)\r\n            return a == b\r\n        end\r\n    end\r\n    for i = self._last, 1, -1 do\r\n        if compairFunc(element, self._stack[i]) then\r\n            return i\r\n        end\r\n    end\r\n    return -1\r\nend\r\n\r\nfunction Stack:RemoveAt(index)\r\n    if index < 1 or index > self._last then\r\n        return\r\n    end\r\n    table.remove(self._stack, index)\r\n    self._last = self._last - 1\r\nend\r\n\r\nfunction Stack:Clear()\r\n    self._stack = nil\r\n    self._stack = {}\r\n    self._last = 0\r\nend\r\n\r\nfunction Stack:Size()\r\n    return self._last\r\nend\r\n\r\nfunction Stack:PrintElement()\r\n    local str = '{'\r\n    for i = self._last, 1, -1 do\r\n        str = str .. tostring(self._stack[i]) .. ','\r\n    end\r\n    str = str .. '}'\r\n    print(str)\r\nend\r\n"}}]},{"class":"cScriptObject","name":"BTreeMainScript","guid":[2838117710,727861174,2541291470,2717323588],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BTreeMainScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"JSON = require(BTreePlugin.JsonModule)\r\nB3 = require(BTreePlugin.B3Module)\r\nActionNode = require(BTreePlugin.ActionNodeModule)\r\nCompositeNode = require(BTreePlugin.CompositeNodeModule)\r\nConditionNode = require(BTreePlugin.ConditionNodeModule)\r\nDecoratorNode = require(BTreePlugin.DecoratorNodeModule)\r\nCustomNode = require(BTreePlugin.CustomNodeModule)\r\n\r\nActionNode:Init()\r\nCompositeNode:Init()\r\nConditionNode:Init()\r\nDecoratorNode:Init()\r\nCustomNode:Init()\r\n\r\nprint(B3.VERSION)\r\n"}}]},{"class":"cDataStoreObject","name":"DataStore","guid":[2838802579,436619052,2516973442,4240601818],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"DataStore"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":200,"class":"sDataStoreComponent","data":{"m_dataSheet":[],"m_archive":[]}}]},{"class":"cFolderObject","name":"BTreePlugin","guid":[2876989748,2457488097,2382853771,4121614769],"parentGuid":[344576033,1668630255,2683907297,2226597768],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BTreePlugin"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cModuleScriptObject","name":"JsonModule","guid":[2281794680,2200063571,3179761180,2263430375],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"JsonModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"-- -*- coding: utf-8 -*-\r\n--\r\n-- Simple JSON encoding and decoding in pure Lua.\r\n--\r\n-- Copyright 2010-2016 Jeffrey Friedl\r\n-- http://regex.info/blog/\r\n-- Latest version: http://regex.info/blog/lua/json\r\n--\r\n-- This code is released under a Creative Commons CC-BY \"Attribution\" License:\r\n-- http://creativecommons.org/licenses/by/3.0/deed.en_US\r\n--\r\n-- It can be used for any purpose so long as:\r\n--    1) the copyright notice above is maintained\r\n--    2) the web-page links above are maintained\r\n--    3) the 'AUTHOR_NOTE' string below is maintained\r\n--\r\nlocal VERSION = '20161109.21' -- version history at end of file\r\nlocal AUTHOR_NOTE = '-[ JSON.lua package by Jeffrey Friedl (http://regex.info/blog/lua/json) version 20161109.21 ]-'\r\n\r\n--\r\n-- The 'AUTHOR_NOTE' variable exists so that information about the source\r\n-- of the package is maintained even in compiled versions. It's also\r\n-- included in OBJDEF below mostly to quiet warnings about unused variables.\r\n--\r\nlocal OBJDEF = {\r\n    VERSION = VERSION,\r\n    AUTHOR_NOTE = AUTHOR_NOTE\r\n}\r\n\r\n--\r\n-- Simple JSON encoding and decoding in pure Lua.\r\n-- JSON definition: http://www.json.org/\r\n--\r\n--\r\n--   JSON = assert(loadfile \"JSON.lua\")() -- one-time load of the routines\r\n--\r\n--   local lua_value = JSON:decode(raw_json_text)\r\n--\r\n--   local raw_json_text    = JSON:encode(lua_table_or_value)\r\n--   local pretty_json_text = JSON:encode_pretty(lua_table_or_value) -- \"pretty printed\" version for human readability\r\n--\r\n--\r\n--\r\n-- DECODING (from a JSON string to a Lua table)\r\n--\r\n--\r\n--   JSON = assert(loadfile \"JSON.lua\")() -- one-time load of the routines\r\n--\r\n--   local lua_value = JSON:decode(raw_json_text)\r\n--\r\n--   If the JSON text is for an object or an array, e.g.\r\n--     { \"what\": \"books\", \"count\": 3 }\r\n--   or\r\n--     [ \"Larry\", \"Curly\", \"Moe\" ]\r\n--\r\n--   the result is a Lua table, e.g.\r\n--     { what = \"books\", count = 3 }\r\n--   or\r\n--     { \"Larry\", \"Curly\", \"Moe\" }\r\n--\r\n--\r\n--   The encode and decode routines accept an optional second argument,\r\n--   \"etc\", which is not used during encoding or decoding, but upon error\r\n--   is passed along to error handlers. It can be of any type (including nil).\r\n--\r\n--\r\n--\r\n-- ERROR HANDLING\r\n--\r\n--   With most errors during decoding, this code calls\r\n--\r\n--      JSON:onDecodeError(message, text, location, etc)\r\n--\r\n--   with a message about the error, and if known, the JSON text being\r\n--   parsed and the byte count where the problem was discovered. You can\r\n--   replace the default JSON:onDecodeError() with your own function.\r\n--\r\n--   The default onDecodeError() merely augments the message with data\r\n--   about the text and the location if known (and if a second 'etc'\r\n--   argument had been provided to decode(), its value is tacked onto the\r\n--   message as well), and then calls JSON.assert(), which itself defaults\r\n--   to Lua's built-in assert(), and can also be overridden.\r\n--\r\n--   For example, in an Adobe Lightroom plugin, you might use something like\r\n--\r\n--          function JSON:onDecodeError(message, text, location, etc)\r\n--             LrErrors.throwUserError(\"Internal Error: invalid JSON data\")\r\n--          end\r\n--\r\n--   or even just\r\n--\r\n--          function JSON.assert(message)\r\n--             LrErrors.throwUserError(\"Internal Error: \" .. message)\r\n--          end\r\n--\r\n--   If JSON:decode() is passed a nil, this is called instead:\r\n--\r\n--      JSON:onDecodeOfNilError(message, nil, nil, etc)\r\n--\r\n--   and if JSON:decode() is passed HTML instead of JSON, this is called:\r\n--\r\n--      JSON:onDecodeOfHTMLError(message, text, nil, etc)\r\n--\r\n--   The use of the fourth 'etc' argument allows stronger coordination\r\n--   between decoding and error reporting, especially when you provide your\r\n--   own error-handling routines. Continuing with the the Adobe Lightroom\r\n--   plugin example:\r\n--\r\n--          function JSON:onDecodeError(message, text, location, etc)\r\n--             local note = \"Internal Error: invalid JSON data\"\r\n--             if type(etc) = 'table' and etc.photo then\r\n--                note = note .. \" while processing for \" .. etc.photo:getFormattedMetadata('fileName')\r\n--             end\r\n--             LrErrors.throwUserError(note)\r\n--          end\r\n--\r\n--            :\r\n--            :\r\n--\r\n--          for i, photo in ipairs(photosToProcess) do\r\n--               :\r\n--               :\r\n--               local data = JSON:decode(someJsonText, { photo = photo })\r\n--               :\r\n--               :\r\n--          end\r\n--\r\n--\r\n--\r\n--   If the JSON text passed to decode() has trailing garbage (e.g. as with the JSON \"[123]xyzzy\"),\r\n--   the method\r\n--\r\n--       JSON:onTrailingGarbage(json_text, location, parsed_value, etc)\r\n--\r\n--   is invoked, where:\r\n--\r\n--       json_text is the original JSON text being parsed,\r\n--       location is the count of bytes into json_text where the garbage starts (6 in the example),\r\n--       parsed_value is the Lua result of what was successfully parsed ({123} in the example),\r\n--       etc is as above.\r\n--\r\n--   If JSON:onTrailingGarbage() does not abort, it should return the value decode() should return,\r\n--   or nil + an error message.\r\n--\r\n--     local new_value, error_message = JSON:onTrailingGarbage()\r\n--\r\n--   The default handler just invokes JSON:onDecodeError(\"trailing garbage\"...), but you can have\r\n--   this package ignore trailing garbage via\r\n--\r\n--      function JSON:onTrailingGarbage(json_text, location, parsed_value, etc)\r\n--         return parsed_value\r\n--      end\r\n--\r\n--\r\n-- DECODING AND STRICT TYPES\r\n--\r\n--   Because both JSON objects and JSON arrays are converted to Lua tables,\r\n--   it's not normally possible to tell which original JSON type a\r\n--   particular Lua table was derived from, or guarantee decode-encode\r\n--   round-trip equivalency.\r\n--\r\n--   However, if you enable strictTypes, e.g.\r\n--\r\n--      JSON = assert(loadfile \"JSON.lua\")() --load the routines\r\n--      JSON.strictTypes = true\r\n--\r\n--   then the Lua table resulting from the decoding of a JSON object or\r\n--   JSON array is marked via Lua metatable, so that when re-encoded with\r\n--   JSON:encode() it ends up as the appropriate JSON type.\r\n--\r\n--   (This is not the default because other routines may not work well with\r\n--   tables that have a metatable set, for example, Lightroom API calls.)\r\n--\r\n--\r\n-- ENCODING (from a lua table to a JSON string)\r\n--\r\n--   JSON = assert(loadfile \"JSON.lua\")() -- one-time load of the routines\r\n--\r\n--   local raw_json_text    = JSON:encode(lua_table_or_value)\r\n--   local pretty_json_text = JSON:encode_pretty(lua_table_or_value) -- \"pretty printed\" version for human readability\r\n--   local custom_pretty    = JSON:encode(lua_table_or_value, etc, { pretty = true, indent = \"|  \", align_keys = false })\r\n--\r\n--   On error during encoding, this code calls:\r\n--\r\n--     JSON:onEncodeError(message, etc)\r\n--\r\n--   which you can override in your local JSON object.\r\n--\r\n--   The 'etc' in the error call is the second argument to encode()\r\n--   and encode_pretty(), or nil if it wasn't provided.\r\n--\r\n--\r\n-- ENCODING OPTIONS\r\n--\r\n--   An optional third argument, a table of options, can be provided to encode().\r\n--\r\n--       encode_options =  {\r\n--           -- options for making \"pretty\" human-readable JSON (see \"PRETTY-PRINTING\" below)\r\n--           pretty         = true,\r\n--           indent         = \"   \",\r\n--           align_keys     = false,\r\n--           array_newline  = false,\r\n--\r\n--           -- other output-related options\r\n--           null           = \"\\0\",   -- see \"ENCODING JSON NULL VALUES\" below\r\n--           stringsAreUtf8 = false,  -- see \"HANDLING UNICODE LINE AND PARAGRAPH SEPARATORS FOR JAVA\" below\r\n--       }\r\n--\r\n--       json_string = JSON:encode(mytable, etc, encode_options)\r\n--\r\n--\r\n--\r\n-- For reference, the defaults are:\r\n--\r\n--           pretty         = false\r\n--           null           = nil,\r\n--           stringsAreUtf8 = false,\r\n--           array_newline  = false,\r\n--\r\n--\r\n--\r\n-- PRETTY-PRINTING\r\n--\r\n--   Enabling the 'pretty' encode option helps generate human-readable JSON.\r\n--\r\n--     pretty = JSON:encode(val, etc, {\r\n--                                       pretty = true,\r\n--                                       indent = \"   \",\r\n--                                       align_keys = false,\r\n--                                     })\r\n--\r\n--   encode_pretty() is also provided: it's identical to encode() except\r\n--   that encode_pretty() provides a default options table if none given in the call:\r\n--\r\n--       { pretty = true, align_keys = false, indent = \"  \" }\r\n--\r\n--   For example, if\r\n--\r\n--      JSON:encode(data)\r\n--\r\n--   produces:\r\n--\r\n--      {\"city\":\"Kyoto\",\"climate\":{\"avg_temp\":16,\"humidity\":\"high\",\"snowfall\":\"minimal\"},\"country\":\"Japan\",\"wards\":11}\r\n--\r\n--   then\r\n--\r\n--      JSON:encode_pretty(data)\r\n--\r\n--   produces:\r\n--\r\n--      {\r\n--        \"city\": \"Kyoto\",\r\n--        \"climate\": {\r\n--          \"avg_temp\": 16,\r\n--          \"humidity\": \"high\",\r\n--          \"snowfall\": \"minimal\"\r\n--        },\r\n--        \"country\": \"Japan\",\r\n--        \"wards\": 11\r\n--      }\r\n--\r\n--   The following three lines return identical results:\r\n--       JSON:encode_pretty(data)\r\n--       JSON:encode_pretty(data, nil, { pretty = true, align_keys = false, indent = \"  \" })\r\n--       JSON:encode       (data, nil, { pretty = true, align_keys = false, indent = \"  \" })\r\n--\r\n--   An example of setting your own indent string:\r\n--\r\n--     JSON:encode_pretty(data, nil, { pretty = true, indent = \"|    \" })\r\n--\r\n--   produces:\r\n--\r\n--      {\r\n--      |    \"city\": \"Kyoto\",\r\n--      |    \"climate\": {\r\n--      |    |    \"avg_temp\": 16,\r\n--      |    |    \"humidity\": \"high\",\r\n--      |    |    \"snowfall\": \"minimal\"\r\n--      |    },\r\n--      |    \"country\": \"Japan\",\r\n--      |    \"wards\": 11\r\n--      }\r\n--\r\n--   An example of setting align_keys to true:\r\n--\r\n--     JSON:encode_pretty(data, nil, { pretty = true, indent = \"  \", align_keys = true })\r\n--\r\n--   produces:\r\n--\r\n--      {\r\n--           \"city\": \"Kyoto\",\r\n--        \"climate\": {\r\n--                     \"avg_temp\": 16,\r\n--                     \"humidity\": \"high\",\r\n--                     \"snowfall\": \"minimal\"\r\n--                   },\r\n--        \"country\": \"Japan\",\r\n--          \"wards\": 11\r\n--      }\r\n--\r\n--   which I must admit is kinda ugly, sorry. This was the default for\r\n--   encode_pretty() prior to version 20141223.14.\r\n--\r\n--\r\n--  HANDLING UNICODE LINE AND PARAGRAPH SEPARATORS FOR JAVA\r\n--\r\n--    If the 'stringsAreUtf8' encode option is set to true, consider Lua strings not as a sequence of bytes,\r\n--    but as a sequence of UTF-8 characters.\r\n--\r\n--    Currently, the only practical effect of setting this option is that Unicode LINE and PARAGRAPH\r\n--    separators, if found in a string, are encoded with a JSON escape instead of being dumped as is.\r\n--    The JSON is valid either way, but encoding this way, apparently, allows the resulting JSON\r\n--    to also be valid Java.\r\n--\r\n--  AMBIGUOUS SITUATIONS DURING THE ENCODING\r\n--\r\n--   During the encode, if a Lua table being encoded contains both string\r\n--   and numeric keys, it fits neither JSON's idea of an object, nor its\r\n--   idea of an array. To get around this, when any string key exists (or\r\n--   when non-positive numeric keys exist), numeric keys are converted to\r\n--   strings.\r\n--\r\n--   For example,\r\n--     JSON:encode({ \"one\", \"two\", \"three\", SOMESTRING = \"some string\" }))\r\n--   produces the JSON object\r\n--     {\"1\":\"one\",\"2\":\"two\",\"3\":\"three\",\"SOMESTRING\":\"some string\"}\r\n--\r\n--   To prohibit this conversion and instead make it an error condition, set\r\n--      JSON.noKeyConversion = true\r\n--\r\n--\r\n-- ENCODING JSON NULL VALUES\r\n--\r\n--   Lua tables completely omit keys whose value is nil, so without special handling there's\r\n--   no way to get a field in a JSON object with a null value.  For example\r\n--      JSON:encode({ username = \"admin\", password = nil })\r\n--   produces\r\n--      {\"username\":\"admin\"}\r\n--\r\n--   In order to actually produce\r\n--      {\"username\":\"admin\", \"password\":null}\r\n--   one can include a string value for a \"null\" field in the options table passed to encode()....\r\n--   any Lua table entry with that value becomes null in the JSON output:\r\n--      JSON:encode({ username = \"admin\", password = \"xyzzy\" }, nil, { null = \"xyzzy\" })\r\n--   produces\r\n--      {\"username\":\"admin\", \"password\":null}\r\n--\r\n--   Just be sure to use a string that is otherwise unlikely to appear in your data.\r\n--   The string \"\\0\" (a string with one null byte) may well be appropriate for many applications.\r\n--\r\n--   The \"null\" options also applies to Lua tables that become JSON arrays.\r\n--      JSON:encode({ \"one\", \"two\", nil, nil })\r\n--   produces\r\n--      [\"one\",\"two\"]\r\n--   while\r\n--      NULL = \"\\0\"\r\n--      JSON:encode({ \"one\", \"two\", NULL, NULL}, nil, { null = NULL })\r\n--   produces\r\n--      [\"one\",\"two\",null,null]\r\n--\r\n--\r\n--\r\n--\r\n-- HANDLING LARGE AND/OR PRECISE NUMBERS\r\n--\r\n--\r\n--   Without special handling, numbers in JSON can lose precision in Lua.\r\n--   For example:\r\n--\r\n--      T = JSON:decode('{  \"small\":12345, \"big\":12345678901234567890123456789, \"precise\":9876.67890123456789012345  }')\r\n--\r\n--      print(\"small:   \",  type(T.small),    T.small)\r\n--      print(\"big:     \",  type(T.big),      T.big)\r\n--      print(\"precise: \",  type(T.precise),  T.precise)\r\n--\r\n--   produces\r\n--\r\n--      small:          number  12345\r\n--      big:            number  1.2345678901235e+28\r\n--      precise:        number  9876.6789012346\r\n--\r\n--   Precision is lost with both 'big' and 'precise'.\r\n--\r\n--   This package offers ways to try to handle this better (for some definitions of \"better\")...\r\n--\r\n--   The most precise method is by setting the global:\r\n--\r\n--      JSON.decodeNumbersAsObjects = true\r\n--\r\n--   When this is set, numeric JSON data is encoded into Lua in a form that preserves the exact\r\n--   JSON numeric presentation when re-encoded back out to JSON, or accessed in Lua as a string.\r\n--\r\n--   (This is done by encoding the numeric data with a Lua table/metatable that returns\r\n--   the possibly-imprecise numeric form when accessed numerically, but the original precise\r\n--   representation when accessed as a string. You can also explicitly access\r\n--   via JSON:forceString() and JSON:forceNumber())\r\n--\r\n--   Consider the example above, with this option turned on:\r\n--\r\n--      JSON.decodeNumbersAsObjects = true\r\n--\r\n--      T = JSON:decode('{  \"small\":12345, \"big\":12345678901234567890123456789, \"precise\":9876.67890123456789012345  }')\r\n--\r\n--      print(\"small:   \",  type(T.small),    T.small)\r\n--      print(\"big:     \",  type(T.big),      T.big)\r\n--      print(\"precise: \",  type(T.precise),  T.precise)\r\n--\r\n--   This now produces:\r\n--\r\n--      small:          table   12345\r\n--      big:            table   12345678901234567890123456789\r\n--      precise:        table   9876.67890123456789012345\r\n--\r\n--   However, within Lua you can still use the values (e.g. T.precise in the example above) in numeric\r\n--   contexts. In such cases you'll get the possibly-imprecise numeric version, but in string contexts\r\n--   and when the data finds its way to this package's encode() function, the original full-precision\r\n--   representation is used.\r\n--\r\n--   Even without using the JSON.decodeNumbersAsObjects option, you can encode numbers\r\n--   in your Lua table that retain high precision upon encoding to JSON, by using the JSON:asNumber()\r\n--   function:\r\n--\r\n--      T = {\r\n--         imprecise = 123456789123456789.123456789123456789,\r\n--         precise   = JSON:asNumber(\"123456789123456789.123456789123456789\")\r\n--      }\r\n--\r\n--      print(JSON:encode_pretty(T))\r\n--\r\n--   This produces:\r\n--\r\n--      {\r\n--         \"precise\": 123456789123456789.123456789123456789,\r\n--         \"imprecise\": 1.2345678912346e+17\r\n--      }\r\n--\r\n--\r\n--\r\n--   A different way to handle big/precise JSON numbers is to have decode() merely return\r\n--   the exact string representation of the number instead of the number itself.\r\n--   This approach might be useful when the numbers are merely some kind of opaque\r\n--   object identifier and you want to work with them in Lua as strings anyway.\r\n--\r\n--   This approach is enabled by setting\r\n--\r\n--      JSON.decodeIntegerStringificationLength = 10\r\n--\r\n--   The value is the number of digits (of the integer part of the number) at which to stringify numbers.\r\n--\r\n--   Consider our previous example with this option set to 10:\r\n--\r\n--      JSON.decodeIntegerStringificationLength = 10\r\n--\r\n--      T = JSON:decode('{  \"small\":12345, \"big\":12345678901234567890123456789, \"precise\":9876.67890123456789012345  }')\r\n--\r\n--      print(\"small:   \",  type(T.small),    T.small)\r\n--      print(\"big:     \",  type(T.big),      T.big)\r\n--      print(\"precise: \",  type(T.precise),  T.precise)\r\n--\r\n--   This produces:\r\n--\r\n--      small:          number  12345\r\n--      big:            string  12345678901234567890123456789\r\n--      precise:        number  9876.6789012346\r\n--\r\n--   The long integer of the 'big' field is at least JSON.decodeIntegerStringificationLength digits\r\n--   in length, so it's converted not to a Lua integer but to a Lua string. Using a value of 0 or 1 ensures\r\n--   that all JSON numeric data becomes strings in Lua.\r\n--\r\n--   Note that unlike\r\n--      JSON.decodeNumbersAsObjects = true\r\n--   this stringification is simple and unintelligent: the JSON number simply becomes a Lua string, and that's the end of it.\r\n--   If the string is then converted back to JSON, it's still a string. After running the code above, adding\r\n--      print(JSON:encode(T))\r\n--   produces\r\n--      {\"big\":\"12345678901234567890123456789\",\"precise\":9876.6789012346,\"small\":12345}\r\n--   which is unlikely to be desired.\r\n--\r\n--   There's a comparable option for the length of the decimal part of a number:\r\n--\r\n--      JSON.decodeDecimalStringificationLength\r\n--\r\n--   This can be used alone or in conjunction with\r\n--\r\n--      JSON.decodeIntegerStringificationLength\r\n--\r\n--   to trip stringification on precise numbers with at least JSON.decodeIntegerStringificationLength digits after\r\n--   the decimal point.\r\n--\r\n--   This example:\r\n--\r\n--      JSON.decodeIntegerStringificationLength = 10\r\n--      JSON.decodeDecimalStringificationLength =  5\r\n--\r\n--      T = JSON:decode('{  \"small\":12345, \"big\":12345678901234567890123456789, \"precise\":9876.67890123456789012345  }')\r\n--\r\n--      print(\"small:   \",  type(T.small),    T.small)\r\n--      print(\"big:     \",  type(T.big),      T.big)\r\n--      print(\"precise: \",  type(T.precise),  T.precise)\r\n--\r\n--  produces:\r\n--\r\n--      small:          number  12345\r\n--      big:            string  12345678901234567890123456789\r\n--      precise:        string  9876.67890123456789012345\r\n--\r\n--\r\n--\r\n--\r\n--\r\n-- SUMMARY OF METHODS YOU CAN OVERRIDE IN YOUR LOCAL LUA JSON OBJECT\r\n--\r\n--    assert\r\n--    onDecodeError\r\n--    onDecodeOfNilError\r\n--    onDecodeOfHTMLError\r\n--    onTrailingGarbage\r\n--    onEncodeError\r\n--\r\n--  If you want to create a separate Lua JSON object with its own error handlers,\r\n--  you can reload JSON.lua or use the :new() method.\r\n--\r\n---------------------------------------------------------------------------\r\n\r\nlocal default_pretty_indent = '  '\r\nlocal default_pretty_options = {pretty = true, align_keys = false, indent = default_pretty_indent}\r\n\r\nlocal isArray = {\r\n    __tostring = function()\r\n        return 'JSON array'\r\n    end\r\n}\r\nisArray.__index = isArray\r\nlocal isObject = {\r\n    __tostring = function()\r\n        return 'JSON object'\r\n    end\r\n}\r\nisObject.__index = isObject\r\n\r\nfunction OBJDEF:newArray(tbl)\r\n    return setmetatable(tbl or {}, isArray)\r\nend\r\n\r\nfunction OBJDEF:newObject(tbl)\r\n    return setmetatable(tbl or {}, isObject)\r\nend\r\n\r\nlocal function getnum(op)\r\n    return type(op) == 'number' and op or op.N\r\nend\r\n\r\nlocal isNumber = {\r\n    __tostring = function(T)\r\n        return T.S\r\n    end,\r\n    __unm = function(op)\r\n        return getnum(op)\r\n    end,\r\n    __concat = function(op1, op2)\r\n        return tostring(op1) .. tostring(op2)\r\n    end,\r\n    __add = function(op1, op2)\r\n        return getnum(op1) + getnum(op2)\r\n    end,\r\n    __sub = function(op1, op2)\r\n        return getnum(op1) - getnum(op2)\r\n    end,\r\n    __mul = function(op1, op2)\r\n        return getnum(op1) * getnum(op2)\r\n    end,\r\n    __div = function(op1, op2)\r\n        return getnum(op1) / getnum(op2)\r\n    end,\r\n    __mod = function(op1, op2)\r\n        return getnum(op1) % getnum(op2)\r\n    end,\r\n    __pow = function(op1, op2)\r\n        return getnum(op1) ^ getnum(op2)\r\n    end,\r\n    __lt = function(op1, op2)\r\n        return getnum(op1) < getnum(op2)\r\n    end,\r\n    __eq = function(op1, op2)\r\n        return getnum(op1) == getnum(op2)\r\n    end,\r\n    __le = function(op1, op2)\r\n        return getnum(op1) <= getnum(op2)\r\n    end\r\n}\r\nisNumber.__index = isNumber\r\n\r\nfunction OBJDEF:asNumber(item)\r\n    if getmetatable(item) == isNumber then\r\n        -- it's already a JSON number object.\r\n        return item\r\n    elseif type(item) == 'table' and type(item.S) == 'string' and type(item.N) == 'number' then\r\n        -- it's a number-object table that lost its metatable, so give it one\r\n        return setmetatable(item, isNumber)\r\n    else\r\n        -- the normal situation... given a number or a string representation of a number....\r\n        local holder = {\r\n            S = tostring(item), -- S is the representation of the number as a string, which remains precise\r\n            N = tonumber(item) -- N is the number as a Lua number.\r\n        }\r\n        return setmetatable(holder, isNumber)\r\n    end\r\nend\r\n\r\n--\r\n-- Given an item that might be a normal string or number, or might be an 'isNumber' object defined above,\r\n-- return the string version. This shouldn't be needed often because the 'isNumber' object should autoconvert\r\n-- to a string in most cases, but it's here to allow it to be forced when needed.\r\n--\r\nfunction OBJDEF:forceString(item)\r\n    if type(item) == 'table' and type(item.S) == 'string' then\r\n        return item.S\r\n    else\r\n        return tostring(item)\r\n    end\r\nend\r\n\r\n--\r\n-- Given an item that might be a normal string or number, or might be an 'isNumber' object defined above,\r\n-- return the numeric version.\r\n--\r\nfunction OBJDEF:forceNumber(item)\r\n    if type(item) == 'table' and type(item.N) == 'number' then\r\n        return item.N\r\n    else\r\n        return tonumber(item)\r\n    end\r\nend\r\n\r\nlocal function unicode_codepoint_as_utf8(codepoint)\r\n    --\r\n    -- codepoint is a number\r\n    --\r\n    if codepoint <= 127 then\r\n        return string.char(codepoint)\r\n    elseif codepoint <= 2047 then\r\n        --\r\n        -- 110yyyxx 10xxxxxx         <-- useful notation from http://en.wikipedia.org/wiki/Utf8\r\n        --\r\n        local highpart = math.floor(codepoint / 0x40)\r\n        local lowpart = codepoint - (0x40 * highpart)\r\n        return string.char(0xC0 + highpart, 0x80 + lowpart)\r\n    elseif codepoint <= 65535 then\r\n        --\r\n        -- 1110yyyy 10yyyyxx 10xxxxxx\r\n        --\r\n        local highpart = math.floor(codepoint / 0x1000)\r\n        local remainder = codepoint - 0x1000 * highpart\r\n        local midpart = math.floor(remainder / 0x40)\r\n        local lowpart = remainder - 0x40 * midpart\r\n\r\n        highpart = 0xE0 + highpart\r\n        midpart = 0x80 + midpart\r\n        lowpart = 0x80 + lowpart\r\n\r\n        --\r\n        -- Check for an invalid character (thanks Andy R. at Adobe).\r\n        -- See table 3.7, page 93, in http://www.unicode.org/versions/Unicode5.2.0/ch03.pdf#G28070\r\n        --\r\n        if\r\n            (highpart == 0xE0 and midpart < 0xA0) or (highpart == 0xED and midpart > 0x9F) or\r\n                (highpart == 0xF0 and midpart < 0x90) or\r\n                (highpart == 0xF4 and midpart > 0x8F)\r\n         then\r\n            return '?'\r\n        else\r\n            return string.char(highpart, midpart, lowpart)\r\n        end\r\n    else\r\n        --\r\n        -- 11110zzz 10zzyyyy 10yyyyxx 10xxxxxx\r\n        --\r\n        local highpart = math.floor(codepoint / 0x40000)\r\n        local remainder = codepoint - 0x40000 * highpart\r\n        local midA = math.floor(remainder / 0x1000)\r\n        remainder = remainder - 0x1000 * midA\r\n        local midB = math.floor(remainder / 0x40)\r\n        local lowpart = remainder - 0x40 * midB\r\n\r\n        return string.char(0xF0 + highpart, 0x80 + midA, 0x80 + midB, 0x80 + lowpart)\r\n    end\r\nend\r\n\r\nfunction OBJDEF:onDecodeError(message, text, location, etc)\r\n    if text then\r\n        if location then\r\n            message = string.format('%s at byte %d of: %s', message, location, text)\r\n        else\r\n            message = string.format('%s: %s', message, text)\r\n        end\r\n    end\r\n\r\n    if etc ~= nil then\r\n        message = message .. ' (' .. OBJDEF:encode(etc) .. ')'\r\n    end\r\n\r\n    if self.assert then\r\n        self.assert(false, message)\r\n    else\r\n        assert(false, message)\r\n    end\r\nend\r\n\r\nfunction OBJDEF:onTrailingGarbage(json_text, location, parsed_value, etc)\r\n    --return self:onDecodeError(\"trailing garbage\", json_text, location, etc)\r\n    return parsed_value\r\nend\r\n\r\nOBJDEF.onDecodeOfNilError = OBJDEF.onDecodeError\r\nOBJDEF.onDecodeOfHTMLError = OBJDEF.onDecodeError\r\n\r\nfunction OBJDEF:onEncodeError(message, etc)\r\n    if etc ~= nil then\r\n        message = message .. ' (' .. OBJDEF:encode(etc) .. ')'\r\n    end\r\n\r\n    if self.assert then\r\n        self.assert(false, message)\r\n    else\r\n        assert(false, message)\r\n    end\r\nend\r\n\r\nlocal function grok_number(self, text, start, options)\r\n    --\r\n    -- Grab the integer part\r\n    --\r\n    local integer_part = text:match('^-?[1-9]%d*', start) or text:match('^-?0', start)\r\n\r\n    if not integer_part then\r\n        self:onDecodeError('expected number', text, start, options.etc)\r\n        return nil, start -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    local i = start + integer_part:len()\r\n\r\n    --\r\n    -- Grab an optional decimal part\r\n    --\r\n    local decimal_part = text:match('^%.%d+', i) or ''\r\n\r\n    i = i + decimal_part:len()\r\n\r\n    --\r\n    -- Grab an optional exponential part\r\n    --\r\n    local exponent_part = text:match('^[eE][-+]?%d+', i) or ''\r\n\r\n    i = i + exponent_part:len()\r\n\r\n    local full_number_text = integer_part .. decimal_part .. exponent_part\r\n\r\n    if options.decodeNumbersAsObjects then\r\n        return OBJDEF:asNumber(full_number_text), i\r\n    end\r\n\r\n    --\r\n    -- If we're told to stringify under certain conditions, so do.\r\n    -- We punt a bit when there's an exponent by just stringifying no matter what.\r\n    -- I suppose we should really look to see whether the exponent is actually big enough one\r\n    -- way or the other to trip stringification, but I'll be lazy about it until someone asks.\r\n    --\r\n    if\r\n        (options.decodeIntegerStringificationLength and\r\n            (integer_part:len() >= options.decodeIntegerStringificationLength or exponent_part:len() > 0)) or\r\n            (options.decodeDecimalStringificationLength and\r\n                (decimal_part:len() >= options.decodeDecimalStringificationLength or exponent_part:len() > 0))\r\n     then\r\n        return full_number_text, i -- this returns the exact string representation seen in the original JSON\r\n    end\r\n\r\n    local as_number = tonumber(full_number_text)\r\n\r\n    if not as_number then\r\n        self:onDecodeError('bad number', text, start, options.etc)\r\n        return nil, start -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    return as_number, i\r\nend\r\n\r\nlocal function grok_string(self, text, start, options)\r\n    if text:sub(start, start) ~= '\"' then\r\n        self:onDecodeError(\"expected string's opening quote\", text, start, options.etc)\r\n        return nil, start -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    local i = start + 1 -- +1 to bypass the initial quote\r\n    local text_len = text:len()\r\n    local VALUE = ''\r\n    while i <= text_len do\r\n        local c = text:sub(i, i)\r\n        if c == '\"' then\r\n            return VALUE, i + 1\r\n        end\r\n        if c ~= '\\\\' then\r\n            VALUE = VALUE .. c\r\n            i = i + 1\r\n        elseif text:match('^\\\\b', i) then\r\n            VALUE = VALUE .. '\\b'\r\n            i = i + 2\r\n        elseif text:match('^\\\\f', i) then\r\n            VALUE = VALUE .. '\\f'\r\n            i = i + 2\r\n        elseif text:match('^\\\\n', i) then\r\n            VALUE = VALUE .. '\\n'\r\n            i = i + 2\r\n        elseif text:match('^\\\\r', i) then\r\n            VALUE = VALUE .. '\\r'\r\n            i = i + 2\r\n        elseif text:match('^\\\\t', i) then\r\n            VALUE = VALUE .. '\\t'\r\n            i = i + 2\r\n        else\r\n            local hex =\r\n                text:match(\r\n                '^\\\\u([0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])',\r\n                i\r\n            )\r\n            if hex then\r\n                i = i + 6 -- bypass what we just read\r\n\r\n                -- We have a Unicode codepoint. It could be standalone, or if in the proper range and\r\n                -- followed by another in a specific range, it'll be a two-code surrogate pair.\r\n                local codepoint = tonumber(hex, 16)\r\n                if codepoint >= 0xD800 and codepoint <= 0xDBFF then\r\n                    -- it's a hi surrogate... see whether we have a following low\r\n                    local lo_surrogate =\r\n                        text:match('^\\\\u([dD][cdefCDEF][0123456789aAbBcCdDeEfF][0123456789aAbBcCdDeEfF])', i)\r\n                    if lo_surrogate then\r\n                        i = i + 6 -- bypass the low surrogate we just read\r\n                        codepoint = 0x2400 + (codepoint - 0xD800) * 0x400 + tonumber(lo_surrogate, 16)\r\n                    else\r\n                        -- not a proper low, so we'll just leave the first codepoint as is and spit it out.\r\n                    end\r\n                end\r\n                VALUE = VALUE .. unicode_codepoint_as_utf8(codepoint)\r\n            else\r\n                -- just pass through what's escaped\r\n                VALUE = VALUE .. text:match('^\\\\(.)', i)\r\n                i = i + 2\r\n            end\r\n        end\r\n    end\r\n\r\n    self:onDecodeError('unclosed string', text, start, options.etc)\r\n    return nil, start -- in case the error method doesn't abort, return something sensible\r\nend\r\n\r\nlocal function skip_whitespace(text, start)\r\n    local _, match_end = text:find('^[ \\n\\r\\t]+', start) -- [http://www.ietf.org/rfc/rfc4627.txt] Section 2\r\n    if match_end then\r\n        return match_end + 1\r\n    else\r\n        return start\r\n    end\r\nend\r\n\r\nlocal grok_one  -- assigned later\r\n\r\nlocal function grok_object(self, text, start, options)\r\n    if text:sub(start, start) ~= '{' then\r\n        self:onDecodeError(\"expected '{'\", text, start, options.etc)\r\n        return nil, start -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    local i = skip_whitespace(text, start + 1) -- +1 to skip the '{'\r\n\r\n    local VALUE = self.strictTypes and self:newObject {} or {}\r\n\r\n    if text:sub(i, i) == '}' then\r\n        return VALUE, i + 1\r\n    end\r\n    local text_len = text:len()\r\n    while i <= text_len do\r\n        local key, new_i = grok_string(self, text, i, options)\r\n\r\n        i = skip_whitespace(text, new_i)\r\n\r\n        if text:sub(i, i) ~= ':' then\r\n            self:onDecodeError('expected colon', text, i, options.etc)\r\n            return nil, i -- in case the error method doesn't abort, return something sensible\r\n        end\r\n\r\n        i = skip_whitespace(text, i + 1)\r\n\r\n        local new_val, new_i = grok_one(self, text, i, options)\r\n\r\n        VALUE[key] = new_val\r\n\r\n        --\r\n        -- Expect now either '}' to end things, or a ',' to allow us to continue.\r\n        --\r\n        i = skip_whitespace(text, new_i)\r\n\r\n        local c = text:sub(i, i)\r\n\r\n        if c == '}' then\r\n            return VALUE, i + 1\r\n        end\r\n\r\n        if text:sub(i, i) ~= ',' then\r\n            self:onDecodeError(\"expected comma or '}'\", text, i, options.etc)\r\n            return nil, i -- in case the error method doesn't abort, return something sensible\r\n        end\r\n\r\n        i = skip_whitespace(text, i + 1)\r\n    end\r\n\r\n    self:onDecodeError(\"unclosed '{'\", text, start, options.etc)\r\n    return nil, start -- in case the error method doesn't abort, return something sensible\r\nend\r\n\r\nlocal function grok_array(self, text, start, options)\r\n    if text:sub(start, start) ~= '[' then\r\n        self:onDecodeError(\"expected '['\", text, start, options.etc)\r\n        return nil, start -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    local i = skip_whitespace(text, start + 1) -- +1 to skip the '['\r\n    local VALUE = self.strictTypes and self:newArray {} or {}\r\n    if text:sub(i, i) == ']' then\r\n        return VALUE, i + 1\r\n    end\r\n\r\n    local VALUE_INDEX = 1\r\n\r\n    local text_len = text:len()\r\n    while i <= text_len do\r\n        local val, new_i = grok_one(self, text, i, options)\r\n\r\n        -- can't table.insert(VALUE, val) here because it's a no-op if val is nil\r\n        VALUE[VALUE_INDEX] = val\r\n        VALUE_INDEX = VALUE_INDEX + 1\r\n\r\n        i = skip_whitespace(text, new_i)\r\n\r\n        --\r\n        -- Expect now either ']' to end things, or a ',' to allow us to continue.\r\n        --\r\n        local c = text:sub(i, i)\r\n        if c == ']' then\r\n            return VALUE, i + 1\r\n        end\r\n        if text:sub(i, i) ~= ',' then\r\n            self:onDecodeError(\"expected comma or ']'\", text, i, options.etc)\r\n            return nil, i -- in case the error method doesn't abort, return something sensible\r\n        end\r\n        i = skip_whitespace(text, i + 1)\r\n    end\r\n    self:onDecodeError(\"unclosed '['\", text, start, options.etc)\r\n    return nil, i -- in case the error method doesn't abort, return something sensible\r\nend\r\n\r\ngrok_one = function(self, text, start, options)\r\n    -- Skip any whitespace\r\n    start = skip_whitespace(text, start)\r\n\r\n    if start > text:len() then\r\n        self:onDecodeError('unexpected end of string', text, nil, options.etc)\r\n        return nil, start -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    if text:find('^\"', start) then\r\n        return grok_string(self, text, start, options.etc)\r\n    elseif text:find('^[-0123456789 ]', start) then\r\n        return grok_number(self, text, start, options)\r\n    elseif text:find('^%{', start) then\r\n        return grok_object(self, text, start, options)\r\n    elseif text:find('^%[', start) then\r\n        return grok_array(self, text, start, options)\r\n    elseif text:find('^true', start) then\r\n        return true, start + 4\r\n    elseif text:find('^false', start) then\r\n        return false, start + 5\r\n    elseif text:find('^null', start) then\r\n        return nil, start + 4\r\n    else\r\n        self:onDecodeError(\"can't parse JSON\", text, start, options.etc)\r\n        return nil, 1 -- in case the error method doesn't abort, return something sensible\r\n    end\r\nend\r\n\r\nfunction OBJDEF:decode(text, etc, options)\r\n    --\r\n    -- If the user didn't pass in a table of decode options, make an empty one.\r\n    --\r\n    if type(options) ~= 'table' then\r\n        options = {}\r\n    end\r\n\r\n    --\r\n    -- If they passed in an 'etc' argument, stuff it into the options.\r\n    -- (If not, any 'etc' field in the options they passed in remains to be used)\r\n    --\r\n    if etc ~= nil then\r\n        options.etc = etc\r\n    end\r\n\r\n    if type(self) ~= 'table' or self.__index ~= OBJDEF then\r\n        local error_message = 'JSON:decode must be called in method format'\r\n        OBJDEF:onDecodeError(error_message, nil, nil, options.etc)\r\n        return nil, error_message -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    if text == nil then\r\n        local error_message = 'nil passed to JSON:decode()'\r\n        self:onDecodeOfNilError(error_message, nil, nil, options.etc)\r\n        return nil, error_message -- in case the error method doesn't abort, return something sensible\r\n    elseif type(text) ~= 'string' then\r\n        local error_message = 'expected string argument to JSON:decode()'\r\n        self:onDecodeError(string.format('%s, got %s', error_message, type(text)), nil, nil, options.etc)\r\n        return nil, error_message -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    if text:match('^%s*$') then\r\n        -- an empty string is nothing, but not an error\r\n        return nil\r\n    end\r\n\r\n    if text:match('^%s*<') then\r\n        -- Can't be JSON... we'll assume it's HTML\r\n        local error_message = 'HTML passed to JSON:decode()'\r\n        self:onDecodeOfHTMLError(error_message, text, nil, options.etc)\r\n        return nil, error_message -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    --\r\n    -- Ensure that it's not UTF-32 or UTF-16.\r\n    -- Those are perfectly valid encodings for JSON (as per RFC 4627 section 3),\r\n    -- but this package can't handle them.\r\n    --\r\n    if text:sub(1, 1):byte() == 0 or (text:len() >= 2 and text:sub(2, 2):byte() == 0) then\r\n        local error_message = 'JSON package groks only UTF-8, sorry'\r\n        self:onDecodeError(error_message, text, nil, options.etc)\r\n        return nil, error_message -- in case the error method doesn't abort, return something sensible\r\n    end\r\n\r\n    --\r\n    -- apply global options\r\n    --\r\n    if options.decodeNumbersAsObjects == nil then\r\n        options.decodeNumbersAsObjects = self.decodeNumbersAsObjects\r\n    end\r\n    if options.decodeIntegerStringificationLength == nil then\r\n        options.decodeIntegerStringificationLength = self.decodeIntegerStringificationLength\r\n    end\r\n    if options.decodeDecimalStringificationLength == nil then\r\n        options.decodeDecimalStringificationLength = self.decodeDecimalStringificationLength\r\n    end\r\n\r\n    --\r\n    -- Finally, go parse it\r\n    --\r\n    local success, value, next_i = pcall(grok_one, self, text, 1, options)\r\n\r\n    if success then\r\n        local error_message = nil\r\n        if next_i ~= #text + 1 then\r\n            -- something's left over after we parsed the first thing.... whitespace is allowed.\r\n            next_i = skip_whitespace(text, next_i)\r\n\r\n            -- if we have something left over now, it's trailing garbage\r\n            if next_i ~= #text + 1 then\r\n                value, error_message = self:onTrailingGarbage(text, next_i, value, options.etc)\r\n            end\r\n        end\r\n        return value, error_message\r\n    else\r\n        -- If JSON:onDecodeError() didn't abort out of the pcall, we'll have received\r\n        -- the error message here as \"value\", so pass it along as an assert.\r\n        local error_message = value\r\n        if self.assert then\r\n            self.assert(false, error_message)\r\n        else\r\n            assert(false, error_message)\r\n        end\r\n        -- ...and if we're still here (because the assert didn't throw an error),\r\n        -- return a nil and throw the error message on as a second arg\r\n        return nil, error_message\r\n    end\r\nend\r\n\r\nlocal function backslash_replacement_function(c)\r\n    if c == '\\n' then\r\n        return '\\\\n'\r\n    elseif c == '\\r' then\r\n        return '\\\\r'\r\n    elseif c == '\\t' then\r\n        return '\\\\t'\r\n    elseif c == '\\b' then\r\n        return '\\\\b'\r\n    elseif c == '\\f' then\r\n        return '\\\\f'\r\n    elseif c == '\"' then\r\n        return '\\\\\"'\r\n    elseif c == '\\\\' then\r\n        return '\\\\\\\\'\r\n    else\r\n        return string.format('\\\\u%04x', c:byte())\r\n    end\r\nend\r\n\r\nlocal chars_to_be_escaped_in_JSON_string =\r\n    '[' ..\r\n    '\"' .. -- class sub-pattern to match a double quote\r\n        '%\\\\' .. -- class sub-pattern to match a backslash\r\n            '%z' .. -- class sub-pattern to match a null\r\n                '\\001' ..\r\n                    '-' ..\r\n                        '\\031' .. -- class sub-pattern to match control characters\r\n                            ']'\r\n\r\nlocal LINE_SEPARATOR_as_utf8 = unicode_codepoint_as_utf8(0x2028)\r\nlocal PARAGRAPH_SEPARATOR_as_utf8 = unicode_codepoint_as_utf8(0x2029)\r\nlocal function json_string_literal(value, options)\r\n    local newval = value:gsub(chars_to_be_escaped_in_JSON_string, backslash_replacement_function)\r\n    if options.stringsAreUtf8 then\r\n        --\r\n        -- This feels really ugly to just look into a string for the sequence of bytes that we know to be a particular utf8 character,\r\n        -- but utf8 was designed purposefully to make this kind of thing possible. Still, feels dirty.\r\n        -- I'd rather decode the byte stream into a character stream, but it's not technically needed so\r\n        -- not technically worth it.\r\n        --\r\n        newval = newval:gsub(LINE_SEPARATOR_as_utf8, '\\\\u2028'):gsub(PARAGRAPH_SEPARATOR_as_utf8, '\\\\u2029')\r\n    end\r\n    return '\"' .. newval .. '\"'\r\nend\r\n\r\nlocal function object_or_array(self, T, etc)\r\n    --\r\n    -- We need to inspect all the keys... if there are any strings, we'll convert to a JSON\r\n    -- object. If there are only numbers, it's a JSON array.\r\n    --\r\n    -- If we'll be converting to a JSON object, we'll want to sort the keys so that the\r\n    -- end result is deterministic.\r\n    --\r\n    local string_keys = {}\r\n    local number_keys = {}\r\n    local number_keys_must_be_strings = false\r\n    local maximum_number_key\r\n\r\n    for key in pairs(T) do\r\n        if type(key) == 'string' then\r\n            table.insert(string_keys, key)\r\n        elseif type(key) == 'number' then\r\n            table.insert(number_keys, key)\r\n            if key <= 0 or key >= math.huge then\r\n                number_keys_must_be_strings = true\r\n            elseif not maximum_number_key or key > maximum_number_key then\r\n                maximum_number_key = key\r\n            end\r\n        else\r\n            self:onEncodeError(\"can't encode table with a key of type \" .. type(key), etc)\r\n        end\r\n    end\r\n\r\n    if #string_keys == 0 and not number_keys_must_be_strings then\r\n        --\r\n        -- An empty table, or a numeric-only array\r\n        --\r\n        if #number_keys > 0 then\r\n            return nil, maximum_number_key -- an array\r\n        elseif tostring(T) == 'JSON array' then\r\n            return nil\r\n        elseif tostring(T) == 'JSON object' then\r\n            return {}\r\n        else\r\n            -- have to guess, so we'll pick array, since empty arrays are likely more common than empty objects\r\n            return nil\r\n        end\r\n    end\r\n\r\n    table.sort(string_keys)\r\n\r\n    local map\r\n    if #number_keys > 0 then\r\n        --\r\n        -- If we're here then we have either mixed string/number keys, or numbers inappropriate for a JSON array\r\n        -- It's not ideal, but we'll turn the numbers into strings so that we can at least create a JSON object.\r\n        --\r\n\r\n        if self.noKeyConversion then\r\n            self:onEncodeError('a table with both numeric and string keys could be an object or array; aborting', etc)\r\n        end\r\n\r\n        --\r\n        -- Have to make a shallow copy of the source table so we can remap the numeric keys to be strings\r\n        --\r\n        map = {}\r\n        for key, val in pairs(T) do\r\n            map[key] = val\r\n        end\r\n\r\n        table.sort(number_keys)\r\n\r\n        --\r\n        -- Throw numeric keys in there as strings\r\n        --\r\n        for _, number_key in ipairs(number_keys) do\r\n            local string_key = tostring(number_key)\r\n            if map[string_key] == nil then\r\n                table.insert(string_keys, string_key)\r\n                map[string_key] = T[number_key]\r\n            else\r\n                self:onEncodeError(\r\n                    'conflict converting table with mixed-type keys into a JSON object: key ' ..\r\n                        number_key .. ' exists both as a string and a number.',\r\n                    etc\r\n                )\r\n            end\r\n        end\r\n    end\r\n\r\n    return string_keys, nil, map\r\nend\r\n\r\n--\r\n-- Encode\r\n--\r\n-- 'options' is nil, or a table with possible keys:\r\n--\r\n--    pretty         -- If true, return a pretty-printed version.\r\n--\r\n--    indent         -- A string (usually of spaces) used to indent each nested level.\r\n--\r\n--    align_keys     -- If true, align all the keys when formatting a table.\r\n--\r\n--    null           -- If this exists with a string value, table elements with this value are output as JSON null.\r\n--\r\n--    stringsAreUtf8 -- If true, consider Lua strings not as a sequence of bytes, but as a sequence of UTF-8 characters.\r\n--                      (Currently, the only practical effect of setting this option is that Unicode LINE and PARAGRAPH\r\n--                       separators, if found in a string, are encoded with a JSON escape instead of as raw UTF-8.\r\n--                       The JSON is valid either way, but encoding this way, apparently, allows the resulting JSON\r\n--                       to also be valid Java.)\r\n--\r\n--\r\nlocal encode_value  -- must predeclare because it calls itself\r\nfunction encode_value(self, value, parents, etc, options, indent, for_key)\r\n    --\r\n    -- keys in a JSON object can never be null, so we don't even consider options.null when converting a key value\r\n    --\r\n    if value == nil or (not for_key and options and options.null and value == options.null) then\r\n        return 'null'\r\n    elseif type(value) == 'string' then\r\n        return json_string_literal(value, options)\r\n    elseif type(value) == 'number' then\r\n        if value ~= value then\r\n            --\r\n            -- NaN (Not a Number).\r\n            -- JSON has no NaN, so we have to fudge the best we can. This should really be a package option.\r\n            --\r\n            return 'null'\r\n        elseif value >= math.huge then\r\n            --\r\n            -- Positive infinity. JSON has no INF, so we have to fudge the best we can. This should\r\n            -- really be a package option. Note: at least with some implementations, positive infinity\r\n            -- is both \">= math.huge\" and \"<= -math.huge\", which makes no sense but that's how it is.\r\n            -- Negative infinity is properly \"<= -math.huge\". So, we must be sure to check the \">=\"\r\n            -- case first.\r\n            --\r\n            return '1e+9999'\r\n        elseif value <= -math.huge then\r\n            --\r\n            -- Negative infinity.\r\n            -- JSON has no INF, so we have to fudge the best we can. This should really be a package option.\r\n            --\r\n            return '-1e+9999'\r\n        else\r\n            return tostring(value)\r\n        end\r\n    elseif type(value) == 'boolean' then\r\n        return tostring(value)\r\n    elseif type(value) ~= 'table' then\r\n        self:onEncodeError(\"can't convert \" .. type(value) .. ' to JSON', etc)\r\n    elseif getmetatable(value) == isNumber then\r\n        return tostring(value)\r\n    else\r\n        --\r\n        -- A table to be converted to either a JSON object or array.\r\n        --\r\n        local T = value\r\n\r\n        if type(options) ~= 'table' then\r\n            options = {}\r\n        end\r\n        if type(indent) ~= 'string' then\r\n            indent = ''\r\n        end\r\n\r\n        if parents[T] then\r\n            self:onEncodeError('table ' .. tostring(T) .. ' is a child of itself', etc)\r\n        else\r\n            parents[T] = true\r\n        end\r\n\r\n        local result_value\r\n\r\n        local object_keys, maximum_number_key, map = object_or_array(self, T, etc)\r\n        if maximum_number_key then\r\n            --\r\n            -- An array...\r\n            --\r\n            local ITEMS = {}\r\n            local key_indent = indent .. tostring(options.indent or '')\r\n            for i = 1, maximum_number_key do\r\n                if not options.array_newline then\r\n                    table.insert(ITEMS, encode_value(self, T[i], parents, etc, options, indent))\r\n                else\r\n                    table.insert(ITEMS, encode_value(self, T[i], parents, etc, options, key_indent))\r\n                end\r\n            end\r\n\r\n            if options.pretty then\r\n                if not options.array_newline then\r\n                    result_value = '[ ' .. table.concat(ITEMS, ', ') .. ' ]'\r\n                else\r\n                    result_value =\r\n                        '[\\n' .. key_indent .. table.concat(ITEMS, ',\\n' .. key_indent) .. '\\n' .. indent .. ']'\r\n                end\r\n            else\r\n                result_value = '[' .. table.concat(ITEMS, ',') .. ']'\r\n            end\r\n        elseif object_keys then\r\n            --\r\n            -- An object\r\n            --\r\n            local TT = map or T\r\n\r\n            if options.pretty then\r\n                local KEYS = {}\r\n                local max_key_length = 0\r\n                for _, key in ipairs(object_keys) do\r\n                    local encoded = encode_value(self, tostring(key), parents, etc, options, indent, true)\r\n                    if options.align_keys then\r\n                        max_key_length = math.max(max_key_length, #encoded)\r\n                    end\r\n                    table.insert(KEYS, encoded)\r\n                end\r\n                local key_indent = indent .. tostring(options.indent or '')\r\n                local subtable_indent =\r\n                    key_indent .. string.rep(' ', max_key_length) .. (options.align_keys and '  ' or '')\r\n                local FORMAT = '%s%' .. string.format('%d', max_key_length) .. 's: %s'\r\n\r\n                local COMBINED_PARTS = {}\r\n                for i, key in ipairs(object_keys) do\r\n                    local encoded_val = encode_value(self, TT[key], parents, etc, options, subtable_indent)\r\n                    table.insert(COMBINED_PARTS, string.format(FORMAT, key_indent, KEYS[i], encoded_val))\r\n                end\r\n                result_value = '{\\n' .. table.concat(COMBINED_PARTS, ',\\n') .. '\\n' .. indent .. '}'\r\n            else\r\n                local PARTS = {}\r\n                for _, key in ipairs(object_keys) do\r\n                    local encoded_val = encode_value(self, TT[key], parents, etc, options, indent)\r\n                    local encoded_key = encode_value(self, tostring(key), parents, etc, options, indent, true)\r\n                    table.insert(PARTS, string.format('%s:%s', encoded_key, encoded_val))\r\n                end\r\n                result_value = '{' .. table.concat(PARTS, ',') .. '}'\r\n            end\r\n        else\r\n            --\r\n            -- An empty array/object... we'll treat it as an array, though it should really be an option\r\n            --\r\n            result_value = '[]'\r\n        end\r\n\r\n        parents[T] = false\r\n        return result_value\r\n    end\r\nend\r\n\r\nlocal function top_level_encode(self, value, etc, options)\r\n    local val = encode_value(self, value, {}, etc, options)\r\n    if val == nil then\r\n        --PRIVATE(\"may need to revert to the previous public verison if I can't figure out what the guy wanted\")\r\n        return val\r\n    else\r\n        return val\r\n    end\r\nend\r\n\r\nfunction OBJDEF:encode(value, etc, options)\r\n    if type(self) ~= 'table' or self.__index ~= OBJDEF then\r\n        OBJDEF:onEncodeError('JSON:encode must be called in method format', etc)\r\n    end\r\n\r\n    --\r\n    -- If the user didn't pass in a table of decode options, make an empty one.\r\n    --\r\n    if type(options) ~= 'table' then\r\n        options = {}\r\n    end\r\n\r\n    return top_level_encode(self, value, etc, options)\r\nend\r\n\r\nfunction OBJDEF:encode_pretty(value, etc, options)\r\n    if type(self) ~= 'table' or self.__index ~= OBJDEF then\r\n        OBJDEF:onEncodeError('JSON:encode_pretty must be called in method format', etc)\r\n    end\r\n\r\n    --\r\n    -- If the user didn't pass in a table of decode options, use the default pretty ones\r\n    --\r\n    if type(options) ~= 'table' then\r\n        options = default_pretty_options\r\n    end\r\n\r\n    return top_level_encode(self, value, etc, options)\r\nend\r\n\r\nfunction OBJDEF.__tostring()\r\n    return 'JSON encode/decode package'\r\nend\r\n\r\nOBJDEF.__index = OBJDEF\r\n\r\nfunction OBJDEF:new(args)\r\n    local new = {}\r\n\r\n    if args then\r\n        for key, val in pairs(args) do\r\n            new[key] = val\r\n        end\r\n    end\r\n\r\n    return setmetatable(new, OBJDEF)\r\nend\r\n\r\nreturn OBJDEF:new()\r\n\r\n--\r\n-- Version history:\r\n--\r\n--   20161109.21   Oops, had a small boo-boo in the previous update.\r\n--\r\n--   20161103.20   Used to silently ignore trailing garbage when decoding. Now fails via JSON:onTrailingGarbage()\r\n--                 http://seriot.ch/parsing_json.php\r\n--\r\n--                 Built-in error message about \"expected comma or ']'\" had mistakenly referred to '['\r\n--\r\n--                 Updated the built-in error reporting to refer to bytes rather than characters.\r\n--\r\n--                 The decode() method no longer assumes that error handlers abort.\r\n--\r\n--                 Made the VERSION string a string instead of a number\r\n--\r\n\r\n--   20160916.19   Fixed the isNumber.__index assignment (thanks to Jack Taylor)\r\n--\r\n--   20160730.18   Added JSON:forceString() and JSON:forceNumber()\r\n--\r\n--   20160728.17   Added concatenation to the metatable for JSON:asNumber()\r\n--\r\n--   20160709.16   Could crash if not passed an options table (thanks jarno heikkinen <jarnoh@capturemonkey.com>).\r\n--\r\n--                 Made JSON:asNumber() a bit more resilient to being passed the results of itself.\r\n--\r\n--   20160526.15   Added the ability to easily encode null values in JSON, via the new \"null\" encoding option.\r\n--                 (Thanks to Adam B for bringing up the issue.)\r\n--\r\n--                 Added some support for very large numbers and precise floats via\r\n--                    JSON.decodeNumbersAsObjects\r\n--                    JSON.decodeIntegerStringificationLength\r\n--                    JSON.decodeDecimalStringificationLength\r\n--\r\n--                 Added the \"stringsAreUtf8\" encoding option. (Hat tip to http://lua-users.org/wiki/JsonModules )\r\n--\r\n--   20141223.14   The encode_pretty() routine produced fine results for small datasets, but isn't really\r\n--                 appropriate for anything large, so with help from Alex Aulbach I've made the encode routines\r\n--                 more flexible, and changed the default encode_pretty() to be more generally useful.\r\n--\r\n--                 Added a third 'options' argument to the encode() and encode_pretty() routines, to control\r\n--                 how the encoding takes place.\r\n--\r\n--                 Updated docs to add assert() call to the loadfile() line, just as good practice so that\r\n--                 if there is a problem loading JSON.lua, the appropriate error message will percolate up.\r\n--\r\n--   20140920.13   Put back (in a way that doesn't cause warnings about unused variables) the author string,\r\n--                 so that the source of the package, and its version number, are visible in compiled copies.\r\n--\r\n--   20140911.12   Minor lua cleanup.\r\n--                 Fixed internal reference to 'JSON.noKeyConversion' to reference 'self' instead of 'JSON'.\r\n--                 (Thanks to SmugMug's David Parry for these.)\r\n--\r\n--   20140418.11   JSON nulls embedded within an array were being ignored, such that\r\n--                     [\"1\",null,null,null,null,null,\"seven\"],\r\n--                 would return\r\n--                     {1,\"seven\"}\r\n--                 It's now fixed to properly return\r\n--                     {1, nil, nil, nil, nil, nil, \"seven\"}\r\n--                 Thanks to \"haddock\" for catching the error.\r\n--\r\n--   20140116.10   The user's JSON.assert() wasn't always being used. Thanks to \"blue\" for the heads up.\r\n--\r\n--   20131118.9    Update for Lua 5.3... it seems that tostring(2/1) produces \"2.0\" instead of \"2\",\r\n--                 and this caused some problems.\r\n--\r\n--   20131031.8    Unified the code for encode() and encode_pretty(); they had been stupidly separate,\r\n--                 and had of course diverged (encode_pretty didn't get the fixes that encode got, so\r\n--                 sometimes produced incorrect results; thanks to Mattie for the heads up).\r\n--\r\n--                 Handle encoding tables with non-positive numeric keys (unlikely, but possible).\r\n--\r\n--                 If a table has both numeric and string keys, or its numeric keys are inappropriate\r\n--                 (such as being non-positive or infinite), the numeric keys are turned into\r\n--                 string keys appropriate for a JSON object. So, as before,\r\n--                         JSON:encode({ \"one\", \"two\", \"three\" })\r\n--                 produces the array\r\n--                         [\"one\",\"two\",\"three\"]\r\n--                 but now something with mixed key types like\r\n--                         JSON:encode({ \"one\", \"two\", \"three\", SOMESTRING = \"some string\" }))\r\n--                 instead of throwing an error produces an object:\r\n--                         {\"1\":\"one\",\"2\":\"two\",\"3\":\"three\",\"SOMESTRING\":\"some string\"}\r\n--\r\n--                 To maintain the prior throw-an-error semantics, set\r\n--                      JSON.noKeyConversion = true\r\n--\r\n--   20131004.7    Release under a Creative Commons CC-BY license, which I should have done from day one, sorry.\r\n--\r\n--   20130120.6    Comment update: added a link to the specific page on my blog where this code can\r\n--                 be found, so that folks who come across the code outside of my blog can find updates\r\n--                 more easily.\r\n--\r\n--   20111207.5    Added support for the 'etc' arguments, for better error reporting.\r\n--\r\n--   20110731.4    More feedback from David Kolf on how to make the tests for Nan/Infinity system independent.\r\n--\r\n--   20110730.3    Incorporated feedback from David Kolf at http://lua-users.org/wiki/JsonModules:\r\n--\r\n--                   * When encoding lua for JSON, Sparse numeric arrays are now handled by\r\n--                     spitting out full arrays, such that\r\n--                        JSON:encode({\"one\", \"two\", [10] = \"ten\"})\r\n--                     returns\r\n--                        [\"one\",\"two\",null,null,null,null,null,null,null,\"ten\"]\r\n--\r\n--                     In 20100810.2 and earlier, only up to the first non-null value would have been retained.\r\n--\r\n--                   * When encoding lua for JSON, numeric value NaN gets spit out as null, and infinity as \"1+e9999\".\r\n--                     Version 20100810.2 and earlier created invalid JSON in both cases.\r\n--\r\n--                   * Unicode surrogate pairs are now detected when decoding JSON.\r\n--\r\n--   20100810.2    added some checking to ensure that an invalid Unicode character couldn't leak in to the UTF-8 encoding\r\n--\r\n--   20100731.1    initial public release\r\n--\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"B3Module","guid":[2550788250,2045660374,2765953421,1021477390],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"B3Module"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"B3 = {\r\n    VERSION = '0.2.0',\r\n    --Returning status\r\n    SUCCESS = 1,\r\n    FAILURE = 2,\r\n    RUNNING = 3,\r\n    ERROR = 4,\r\n    --Node categories\r\n    COMPOSITE = 'composite',\r\n    DECORATOR = 'decorator',\r\n    ACTION = 'action',\r\n    CONDITION = 'condition',\r\n    createUUID = function()\r\n        local seed = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'}\r\n        local tb = {}\r\n        for i = 1, 32 do\r\n            table.insert(tb, seed[math.random(1, 16)])\r\n        end\r\n        return table.concat(tb)\r\n    end,\r\n    Class = function(classname, super)\r\n        local superType = type(super)\r\n        local cls\r\n\r\n        --如果父类既不是函数也不是table则说明父类为空\r\n        if superType ~= 'function' and superType ~= 'table' then\r\n            superType = nil\r\n            super = nil\r\n        end\r\n\r\n        --如果父类的类型是函数或者是C对象\r\n        if superType == 'function' or (super and super.__ctype == 1) then\r\n            -- inherited from native C++ Object\r\n            cls = {}\r\n\r\n            --如果父类是表则复制成员并且设置这个类的继承信息\r\n            --如果是函数类型则设置构造方法并且设置ctor函数\r\n            if superType == 'table' then\r\n                -- copy fields from super\r\n                for k, v in pairs(super) do\r\n                    cls[k] = v\r\n                end\r\n                cls.__create = super.__create\r\n                cls.super = super\r\n            else\r\n                cls.__create = super\r\n                cls.ctor = function()\r\n                end\r\n            end\r\n\r\n            --设置类型的名称\r\n            cls.__cname = classname\r\n            cls.__ctype = 1\r\n\r\n            --定义该类型的创建实例的函数为基类的构造函数后复制到子类实例\r\n            --并且调用子数的ctor方法\r\n            function cls.new(...)\r\n                local instance = cls.__create(...)\r\n                -- copy fields from class to native object\r\n                for k, v in pairs(cls) do\r\n                    instance[k] = v\r\n                end\r\n                instance.class = cls\r\n                instance:ctor(...)\r\n                return instance\r\n            end\r\n        else\r\n            --如果是继承自普通的lua表,则设置一下原型，并且构造实例后也会调用ctor方法\r\n            -- inherited from Lua Object\r\n            if super then\r\n                cls = {}\r\n                setmetatable(cls, {__index = super})\r\n                cls.super = super\r\n            else\r\n                cls = {\r\n                    ctor = function()\r\n                    end\r\n                }\r\n            end\r\n\r\n            cls.__cname = classname\r\n            cls.__ctype = 2 -- lua\r\n            cls.__index = cls\r\n\r\n            function cls.new(...)\r\n                local instance = setmetatable({}, cls)\r\n                instance.class = cls\r\n                instance:ctor(...)\r\n                return instance\r\n            end\r\n        end\r\n\r\n        return cls\r\n    end,\r\n    decodeJson = function(str)\r\n        return JSON:decode(str)\r\n    end\r\n}\r\n\r\n----------------Tick--------------------------\r\nlocal tick = B3.Class('Tick')\r\nB3.Tick = tick\r\n\r\nfunction tick:ctor()\r\n    self.tree = nil\r\n    self.debug = nil\r\n    self.target = nil\r\n    self.blackboard = nil\r\n\r\n    self._openNodes = {}\r\n    self._nodeCount = 0\r\nend\r\n\r\nfunction tick:_enterNode(node)\r\n    self._nodeCount = self._nodeCount + 1\r\n    table.insert(self._openNodes, node)\r\nend\r\n\r\nfunction tick:_openNode(node)\r\nend\r\n\r\nfunction tick:_tickNode(node)\r\nend\r\n\r\nfunction tick:_closeNode(node)\r\nend\r\n\r\nfunction tick:_exitNode(node)\r\nend\r\n\r\n----------------BaseNode----------------------\r\nlocal baseNode = B3.Class('BaseNode')\r\nB3.BaseNode = baseNode\r\n\r\nfunction baseNode:ctor(params)\r\n    self.id = B3.createUUID()\r\n    self.name = ''\r\n    self.title = self.title or self.name\r\n    self.description = ''\r\n    self.parameters = {}\r\n    self.properties = {}\r\nend\r\n\r\nfunction baseNode:_execute(tick)\r\n    --ENTER\r\n    self:_enter(tick)\r\n\r\n    --OPEN\r\n    if not (tick.blackboard:get('isOpen', tick.tree.id, self.id)) then\r\n        self:_open(tick)\r\n    end\r\n\r\n    --TICK\r\n    local status = self:_tick(tick)\r\n\r\n    --CLOSE\r\n    if status ~= B3.RUNNING then\r\n        self:_close(tick)\r\n    end\r\n\r\n    --EXIT\r\n    self:_exit(tick)\r\n\r\n    return status\r\nend\r\n\r\nfunction baseNode:_enter(tick)\r\n    tick:_enterNode(self)\r\n    self:enter(tick)\r\nend\r\n\r\nfunction baseNode:_open(tick)\r\n    tick:_openNode(self)\r\n    tick.blackboard:set('isOpen', true, tick.tree.id, self.id)\r\n    self:open(tick)\r\nend\r\n\r\nfunction baseNode:_tick(tick)\r\n    tick:_tickNode(self)\r\n    return self:tick(tick)\r\nend\r\n\r\nfunction baseNode:_close(tick)\r\n    tick:_closeNode(self)\r\n    tick.blackboard:set('isOpen', false, tick.tree.id, self.id)\r\n    self:close(tick)\r\nend\r\n\r\nfunction baseNode:_exit(tick)\r\n    tick:_exitNode(self)\r\n    self:exit(tick)\r\nend\r\n\r\nfunction baseNode:enter(tick)\r\nend\r\n\r\nfunction baseNode:open(tick)\r\nend\r\n\r\nfunction baseNode:tick(tick)\r\nend\r\n\r\nfunction baseNode:close(tick)\r\nend\r\n\r\nfunction baseNode:exit(tick)\r\nend\r\n\r\n------------------Blackboard------------------------\r\nlocal blackboard = B3.Class('Blackboard')\r\nB3.Blackboard = blackboard\r\n\r\nfunction blackboard:ctor()\r\n    self._baseMemory = {}\r\n    self._treeMemory = {}\r\nend\r\n\r\nfunction blackboard:_getTreeMemory(treeScope)\r\n    if not self._treeMemory[treeScope] then\r\n        self._treeMemory[treeScope] = {nodeMemory = {}, openNodes = {}, traversalDepth = 0, traversalCycle = 0}\r\n    end\r\n    return self._treeMemory[treeScope]\r\nend\r\n\r\nfunction blackboard:_getNodeMemory(treeMemory, nodeScope)\r\n    local memory = treeMemory.nodeMemory\r\n\r\n    if not memory then\r\n        memory = {}\r\n    end\r\n\r\n    if memory and not memory[nodeScope] then\r\n        memory[nodeScope] = {}\r\n    end\r\n\r\n    return memory[nodeScope]\r\nend\r\n\r\nfunction blackboard:_getMemory(treeScope, nodeScope)\r\n    local memory = self._baseMemory\r\n\r\n    if treeScope then\r\n        memory = self:_getTreeMemory(treeScope)\r\n\r\n        if nodeScope then\r\n            memory = self:_getNodeMemory(memory, nodeScope)\r\n        end\r\n    end\r\n\r\n    return memory\r\nend\r\n\r\nfunction blackboard:set(key, value, treeScope, nodeScope)\r\n    local memory = self:_getMemory(treeScope, nodeScope)\r\n    memory[key] = value\r\nend\r\n\r\nfunction blackboard:get(key, treeScope, nodeScope)\r\n    local memory = self:_getMemory(treeScope, nodeScope)\r\n    if memory then\r\n        return memory[key]\r\n    end\r\n    return {}\r\nend\r\n\r\n------------BehaviorTree-----------------------------\r\nlocal behaviorTree = B3.Class('BehaviorTree')\r\nB3.BehaviorTree = behaviorTree\r\n\r\nfunction behaviorTree:ctor()\r\n    self.id = B3.createUUID()\r\n    self.title = 'The behavior tree'\r\n    self.description = 'Default description'\r\n    self.properties = {}\r\n    self.root = nil\r\n    self.debug = nil\r\nend\r\n\r\nfunction behaviorTree:load(jsonData, names)\r\n    names = names or {}\r\n    local data = JSON:decode(jsonData)\r\n\r\n    self.title = data.title or self.title\r\n    self.description = data.description or self.description\r\n    self.properties = data.properties or self.properties\r\n    --print(table.dump(data))\r\n    print(self.title)\r\n    --print(self.description)\r\n    print(table.dump(data.nodes))\r\n\r\n    local nodes = {}\r\n    local id, spec, node\r\n\r\n    for i, v in pairs(data.nodes) do\r\n        id = i\r\n        spec = v\r\n        local Cls\r\n\r\n        if names[spec.name] then\r\n            Cls = names[spec.name]\r\n        elseif B3[spec.name] then\r\n            Cls = B3[spec.name]\r\n        else\r\n            print('Error : BehaviorTree.load : Invalid node name + ' .. spec.name .. '.')\r\n        end\r\n        --node = Cls.new(spec.properties)\r\n        node = Cls.new()\r\n        node.id = spec.id or node.id\r\n        node.title = spec.title or node.title\r\n        node.description = spec.description or node.description\r\n        node.properties = spec.properties or node.proerties\r\n        nodes[id] = node\r\n    end\r\n\r\n    for i, v in pairs(data.nodes) do\r\n        id = i\r\n        spec = v\r\n        node = nodes[id]\r\n        --print(i,v)\r\n        if v.child then\r\n            node.child = nodes[v.child]\r\n        end\r\n\r\n        if v.children then\r\n            for i = 1, #v.children do\r\n                local cid = spec.children[i]\r\n                --print(\"{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{\")\r\n                --print(spec.children[i],nodes[cid])\r\n                table.insert(node.children, nodes[cid])\r\n            end\r\n        end\r\n    end\r\n\r\n    self.root = nodes[data.root]\r\n    print(self.root.name)\r\nend\r\n\r\nfunction behaviorTree:dump()\r\n    local data = {}\r\n    local customNames = {}\r\n\r\n    data.title = self.title\r\n    data.description = self.description\r\n    if self.root then\r\n        data.root = self.root.id\r\n    else\r\n        data.root = nil\r\n    end\r\n    data.properties = self.properties\r\n    data.nodes = {}\r\n    data.custom_nodes = {}\r\n\r\n    if self.root then\r\n        return data\r\n    end\r\n\r\n    --TODO:\r\nend\r\n\r\nfunction behaviorTree:tick(target, blackboard)\r\n    if not blackboard then\r\n        print('The blackboard parameter is obligatory and must be an instance of B3.Blackboard')\r\n    end\r\n\r\n    local tick = B3.Tick.new()\r\n    tick.debug = self.debug\r\n    tick.target = target\r\n    tick.blackboard = blackboard\r\n    tick.tree = self\r\n\r\n    --TICK NODE\r\n    local state = self.root:_execute(tick)\r\n\r\n    --CLOSE NODES FROM LAST TICK, IF NEEDED\r\n    local lastOpenNodes = blackboard:get('openNodes', self.id)\r\n    local currOpenNodes = tick._openNodes[0]\r\n    if not lastOpenNodes then\r\n        lastOpenNodes = {}\r\n    end\r\n\r\n    if not currOpenNodes then\r\n        currOpenNodes = {}\r\n    end\r\n\r\n    local start = 0\r\n    local i\r\n    for i = 0, math.min(#lastOpenNodes, #currOpenNodes) do\r\n        start = i + 1\r\n        if lastOpenNodes[i] ~= currOpenNodes[i] then\r\n            break\r\n        end\r\n    end\r\n\r\n    for i = #lastOpenNodes, 0, -1 do\r\n        if lastOpenNodes[i] then\r\n            lastOpenNodes[i]:_close(tick)\r\n        end\r\n    end\r\n\r\n    blackboard:set('openNodes', currOpenNodes, self.id)\r\n    blackboard:set('nodeCount', tick._nodeCount, self.id)\r\nend\r\n\r\nreturn B3\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ActionNodeModule","guid":[519411139,4154868052,2936069405,1497373262],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ActionNodeModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local ActionNode = {}\r\n\r\nfunction ActionNode:Init()\r\n    -------------Action---------------------\r\n    local action = B3.Class('Action', B3.BaseNode)\r\n    B3.Action = action\r\n\r\n    function action:ctor()\r\n        B3.BaseNode.ctor(self)\r\n\r\n        self.category = B3.ACTION\r\n    end\r\n\r\n    --Action=========Runner==========\r\n    local runner = B3.Class('Runner', B3.Action)\r\n    B3.Runner = runner\r\n\r\n    function runner:ctor()\r\n        B3.Action.ctor(self)\r\n\r\n        self.name = 'Runner'\r\n    end\r\n\r\n    function runner:tick(tick)\r\n        --print(self.title)\r\n        --print(table.dump(self.properties))\r\n        return B3.RUNNING\r\n    end\r\n\r\n    --Action========Error======\r\n    local error = B3.Class('Error', B3.Action)\r\n    B3.Error = error\r\n\r\n    function error:ctor()\r\n        B3.Action.ctor(self)\r\n\r\n        self.name = 'Error'\r\n    end\r\n\r\n    function error:tick()\r\n        return B3.ERROR\r\n    end\r\n\r\n    --Action========Failer======\r\n    local failer = B3.Class('Failer', B3.Action)\r\n    B3.Failer = failer\r\n\r\n    function failer:ctor()\r\n        B3.Action.ctor(self)\r\n\r\n        self.name = 'Failer'\r\n    end\r\n\r\n    function failer:tick()\r\n        return B3.FAILURE\r\n    end\r\n\r\n    --action=======Succeeder=====\r\n    local succeeder = B3.Class('Succeeder', B3.Action)\r\n    B3.Succeeder = succeeder\r\n\r\n    function succeeder:ctor()\r\n        B3.Action.ctor(self)\r\n\r\n        self.name = 'Succeeder'\r\n    end\r\n\r\n    function succeeder:tick(tick)\r\n        return B3.SUCCESS\r\n    end\r\n\r\n    --action=======Wait=====\r\n    local mwait = B3.Class('Wait', B3.Action)\r\n    B3.Wait = mwait\r\n\r\n    function mwait:ctor()\r\n        B3.Action.ctor(self)\r\n\r\n        self.name = 'Wait'\r\n    end\r\n\r\n    function mwait:open(tick)\r\n        local startTime = Timer.GetTimeMillisecond()\r\n        self.endTime = self.properties.milliseconds\r\n        tick.blackboard:set('startTime', startTime, tick.tree.id, self.id)\r\n    end\r\n\r\n    function mwait:tick(tick)\r\n        local currTime = Timer.GetTimeMillisecond()\r\n        local startTime = tick.blackboard:get('startTime', tick.tree.id, self.id)\r\n\r\n        if not startTime or startTime == 0 then\r\n            startTime = currTime\r\n            tick.blackboard:set('startTime', currTime, tick.tree.id, self.id)\r\n        end\r\n\r\n        --print(self.endTime)\r\n        if currTime - startTime > self.endTime then\r\n            return B3.SUCCESS\r\n        end\r\n\r\n        return B3.RUNNING\r\n    end\r\nend\r\n\r\nreturn ActionNode\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"CompositeNodeModule","guid":[3594053378,1655980454,2224855536,3599643798],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"CompositeNodeModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local CompositeNode = {}\r\n\r\nfunction CompositeNode:Init()\r\n    --------------------Composite---------------------\r\n    local composite = B3.Class('Composite', B3.BaseNode)\r\n    B3.Composite = composite\r\n\r\n    function composite:ctor(params)\r\n        self.children = (params and params.children) or {}\r\n    end\r\n\r\n    --Composite==========Sequence=================\r\n    local sequence = B3.Class('Sequence', B3.Composite)\r\n    B3.Sequence = sequence\r\n\r\n    function sequence:ctor()\r\n        B3.Composite.ctor(self)\r\n\r\n        self.name = 'Sequence'\r\n    end\r\n\r\n    function sequence:tick(tick)\r\n        for i = 1, #self.children do\r\n            local v = self.children[i]\r\n            local status = v:_execute(tick)\r\n            --------print(i,v)\r\n            if status ~= B3.SUCCESS then\r\n                return status\r\n            end\r\n        end\r\n        return B3.SUCCESS\r\n    end\r\n\r\n    --Composite==========MemSequence=================\r\n    local memSequence = B3.Class('MemSequence', B3.Composite)\r\n    B3.MemSequence = memSequence\r\n\r\n    function memSequence:ctor()\r\n        B3.Composite.ctor(self)\r\n\r\n        self.name = 'MemSequence'\r\n    end\r\n\r\n    function memSequence:open(tick)\r\n        tick.blackboard:set('runningChild', 1, tick.tree.id, self.id)\r\n    end\r\n\r\n    function memSequence:tick(tick)\r\n        local child = tick.blackboard:get('runningChild', tick.tree.id, self.id)\r\n        for i = child, #self.children do\r\n            local v = self.children[i]\r\n            local status = v:_execute(tick)\r\n\r\n            if status ~= B3.SUCCESS then\r\n                if status == B3.RUNNING then\r\n                    tick.blackboard:set('runningChild', i, tick.tree.id, self.id)\r\n                end\r\n\r\n                return status\r\n            end\r\n        end\r\n\r\n        return B3.SUCCESS\r\n    end\r\n\r\n    --Composite==========Priority=================\r\n    local priority = B3.Class('Priority', B3.Composite)\r\n    B3.Priority = priority\r\n\r\n    function priority:ctor()\r\n        B3.Composite.ctor(self)\r\n\r\n        self.name = 'Priority'\r\n    end\r\n\r\n    function priority:tick(tick)\r\n        for i, v in pairs(self.children) do\r\n            local status = v:_execute(tick)\r\n\r\n            if status ~= B3.FAILURE then\r\n                return status\r\n            end\r\n        end\r\n\r\n        return B3.FAILURE\r\n    end\r\n\r\n    --Composite==========MemPriority=================\r\n    local memPriority = B3.Class('MemPriority', B3.Composite)\r\n    B3.MemPriority = memPriority\r\n\r\n    function memPriority:ctor()\r\n        B3.Composite.ctor(self)\r\n\r\n        self.name = 'MemPriority'\r\n    end\r\n\r\n    function memPriority:open(tick)\r\n        tick.blackboard:set('runningChild', 1, tick.tree.id, self.id)\r\n    end\r\n\r\n    function memPriority:tick(tick)\r\n        local child = tick.blackboard:get('runningChild', tick.tree.id, self.id)\r\n        for i = child, #self.children do\r\n            local v = self.children[i]\r\n            local status = v:_execute(tick)\r\n\r\n            if status ~= B3.FAILURE then\r\n                if status == B3.RUNNING then\r\n                    tick.blackboard:set('runningChild', i, tick.tree.id, self.id)\r\n                end\r\n\r\n                return status\r\n            end\r\n        end\r\n\r\n        return B3.FAILURE\r\n    end\r\nend\r\nreturn CompositeNode\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"ConditionNodeModule","guid":[834458622,841238893,3085535529,1118658168],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"ConditionNodeModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local ConditionNode = {}\r\n\r\nfunction ConditionNode:Init()\r\n    ----------------------Condition-------------------\r\n    local condition = B3.Class('Condition', B3.BaseNode)\r\n    B3.Condition = condition\r\n\r\n    function condition:ctor(params)\r\n        B3.BaseNode.ctor(self, params)\r\n    end\r\nend\r\n\r\nreturn ConditionNode\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"DecoratorNodeModule","guid":[2362989191,2074755521,3218568945,2646351428],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"DecoratorNodeModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local DecoratorNode = {}\r\n\r\nfunction DecoratorNode:Init()\r\n    ------------------Decorator----------------------\r\n    local decorator = B3.Class('Decorator', B3.BaseNode)\r\n    B3.Decorator = decorator\r\n\r\n    function decorator:ctor(params)\r\n        B3.BaseNode.ctor(self, params)\r\n\r\n        if not params then\r\n            params = {}\r\n        end\r\n\r\n        self.child = params.child or nil\r\n    end\r\n\r\n    ---------Repeater\r\n    local repeater = B3.Class('Repeater', B3.Decorator)\r\n    B3.Repeater = repeater\r\n\r\n    function repeater:ctor(params)\r\n        B3.Decorator.ctor(self)\r\n\r\n        if not params then\r\n            params = {}\r\n        end\r\n\r\n        self.name = 'Repeater'\r\n        self.title = 'Repeater <maxLoop>x'\r\n        self.parameters = {maxLoop = -1}\r\n\r\n        self.maxLoop = params.maxLoop or -1\r\n    end\r\n\r\n    function repeater:open(tick)\r\n        tick.blackboard:set('i', 0, tick.tree.id, self.id)\r\n        --print(table.dump(self.properties.maxLoop))\r\n        self.maxLoop = self.properties.maxLoop\r\n    end\r\n\r\n    function repeater:tick(tick)\r\n        if not self.child then\r\n            return B3.ERROR\r\n        end\r\n\r\n        local i = tick.blackboard:get('i', tick.tree.id, self.id)\r\n        local status = B3.SUCCESS\r\n\r\n        while (self.maxLoop < 0 or i < self.maxLoop) do\r\n            --print(i)\r\n            local status = self.child:_execute(tick)\r\n            if status == B3.SUCCESS or status == B3.FAILURE then\r\n                i = i + 1\r\n                wait()\r\n            else\r\n                break\r\n            end\r\n        end\r\n\r\n        tick.blackboard:set('i', i, tick.tree.id, self.id)\r\n        return status\r\n    end\r\n\r\n    ---------------RepeatUntilSuccess\r\n    local repeatUntilSuccess = B3.Class('RepeatUntilSuccess', B3.Decorator)\r\n    B3.RepeatUntilSuccess = repeatUntilSuccess\r\n\r\n    function repeatUntilSuccess:ctor(params)\r\n        B3.Decorator.ctor(self)\r\n\r\n        if not params then\r\n            params = {}\r\n        end\r\n\r\n        self.name = 'RepeatUntilSuccess'\r\n        self.title = 'Repeat Until Success'\r\n        self.parameters = {maxLoop = -1}\r\n\r\n        self.maxLoop = params.maxLoop or -1\r\n    end\r\n\r\n    function repeatUntilSuccess:open(tick)\r\n        tick.blackboard.set('i', 0, tick.tree.id, self.id)\r\n        self.maxLoop = self.properties.maxLoop\r\n    end\r\n\r\n    function repeatUntilSuccess:tick(tick)\r\n        if not self.child then\r\n            return B3.ERROR\r\n        end\r\n\r\n        local i = tick.blackboard.get('i', tick.tree.id, self.id)\r\n        local status = B3.ERROR\r\n\r\n        while (self.maxLoop < 0 or i < self.maxLoop) do\r\n            local status = self.child:_execute(tick)\r\n\r\n            if status == B3.FAILURE then\r\n                i = i + 1\r\n            else\r\n                break\r\n            end\r\n        end\r\n\r\n        i = tick.blackboard.set('i', i, tick.tree.id, self.id)\r\n        return status\r\n    end\r\n\r\n    ------------------RepeatUntilFailure\r\n    local repeatUntilFailure = B3.Class('RepeatUntilFailure', B3.Decorator)\r\n    B3.RepeatUntilFailure = repeatUntilFailure\r\n\r\n    function repeatUntilFailure:ctor(params)\r\n        B3.Decorator.ctor(self)\r\n\r\n        if not params then\r\n            params = {}\r\n        end\r\n\r\n        self.name = 'RepeatUntilFailure'\r\n        self.title = 'Repeat Until Failure'\r\n        self.parameters = {maxLoop = -1}\r\n\r\n        self.maxLoop = params.maxLoop or -1\r\n    end\r\n\r\n    function repeatUntilFailure:open(tick)\r\n        tick.blackboard.set('i', 0, tick.tree.id, self.id)\r\n        self.maxLoop = self.properties.maxLoop\r\n    end\r\n\r\n    function repeatUntilFailure:tick(tick)\r\n        if not self.child then\r\n            return B3.ERROR\r\n        end\r\n\r\n        local i = tick.blackboard.get('i', tick.tree.id, self.id)\r\n        local status = B3.ERROR\r\n\r\n        while (self.maxLoop < 0 or i < self.maxLoop) do\r\n            local status = self.child:_execute(tick)\r\n\r\n            if status == B3.SUCCESS then\r\n                i = i + 1\r\n            else\r\n                break\r\n            end\r\n        end\r\n\r\n        i = tick.blackboard.set('i', i, tick.tree.id, self.id)\r\n        return status\r\n    end\r\n\r\n    ---------------------Inverter\r\n    local inverter = B3.Class('Inverter', B3.Decorator)\r\n    B3.Inverter = inverter\r\n\r\n    function inverter:ctor()\r\n        B3.Inverter.ctor(self)\r\n\r\n        self.name = 'Inverter'\r\n    end\r\n\r\n    function inverter:tick(tick)\r\n        if not self.child then\r\n            return B3.ERROR\r\n        end\r\n\r\n        local status = self.child:_execute(tick)\r\n\r\n        if status == B3.SUCCESS then\r\n            status = B3.FAILURE\r\n        elseif status == B3.FAILURE then\r\n            status = B3.SUCCESS\r\n        end\r\n\r\n        return status\r\n    end\r\n\r\n    -------------\r\n    local maxTime = B3.Class('MaxTime', B3.Decorator)\r\n    B3.MaxTime = maxTime\r\n\r\n    function maxTime:ctor(params)\r\n        B3.MaxTime.ctor(self)\r\n\r\n        self.name = 'MaxTime'\r\n        self.title = 'Max <maxTime>ms'\r\n        self.parameters = {maxTime = 0}\r\n\r\n        if not params or not params.maxTime then\r\n            print('maxTime parameter in MaxTime decorator is an obligatory parameter')\r\n            return\r\n        end\r\n\r\n        self.maxTime = params.maxTime\r\n    end\r\n\r\n    function maxTime:open(tick)\r\n        local startTime = Timer.GetTimeMillisecond()\r\n        self.maxTime = self.properties.maxTime\r\n        tick.blackboard:set('startTime', startTime, tick.tree.id, self.id)\r\n    end\r\n\r\n    function maxTime:tick(tick)\r\n        if not self.child then\r\n            return B3.ERROR\r\n        end\r\n\r\n        local currTime = Timer.GetTimeMillisecond()\r\n        local startTime = tick.blackboard.get('startTime', tick.tree.id, self.id)\r\n\r\n        local status = self.child:_execute(tick)\r\n        if currTime - startTime > self.maxTime then\r\n            return B3.FAILURE\r\n        end\r\n\r\n        return status\r\n    end\r\n\r\n    -------------Limiter\r\n    local limiter = B3.Class('Limiter', B3.Decorator)\r\n    B3.Limiter = limiter\r\n\r\n    function limiter:ctor()\r\n        B3.Decorator.ctor(self)\r\n\r\n        self.name = 'Limiter'\r\n        self.title = 'Limit <maxLoop> Activations'\r\n        self.parameters = {maxLoop = 1}\r\n    end\r\n\r\n    function limiter:open(tick)\r\n        tick.blackboard.set('i', 0, tick.tree.id, self.id)\r\n        self.maxLoop = self.properties.maxLoop\r\n    end\r\n\r\n    function limiter:tick(tick)\r\n        if not self.child then\r\n            return B3.ERROR\r\n        end\r\n\r\n        local i = tick.blackboard:get('i', tick.tree.id, self.id)\r\n\r\n        if i < self.maxLoop then\r\n            local status = self.child:_execute(tick)\r\n\r\n            if status == B3.SUCCESS or status == B3.FAILURE then\r\n                tick.blackboard:set('i', i + 1, tick.tree.id, self.id)\r\n            end\r\n\r\n            return status\r\n        end\r\n\r\n        return B3.FAILURE\r\n    end\r\nend\r\n\r\nreturn DecoratorNode\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"CustomNodeModule","guid":[1954964309,1422149872,2162306891,2839149325],"parentGuid":[2876989748,2457488097,2382853771,4121614769],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"CustomNodeModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local CustomNode = {}\r\nfunction CustomNode:Init()\r\n    local testr = B3.Class('Test', B3.Action)\r\n    B3.Test = testr\r\n\r\n    function testr:ctor()\r\n        B3.Action.ctor(self)\r\n\r\n        self.name = 'Test'\r\n    end\r\n\r\n    function testr:tick(tick)\r\n        print(self.title)\r\n        --print(type(self.properties.mVal))\r\n        if (self.properties.mVal == 'true') then\r\n            return B3.SUCCESS\r\n        else\r\n            return B3.RUNNING\r\n        end\r\n    end\r\nend\r\n\r\nreturn CustomNode\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cPrimitiveObject","name":"BaseFloor","guid":[4211227124,399589691,2212667733,3335218667],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,0.8,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BaseFloor"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_size":[50.0,0.2,50.0]}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":2400.0,"m_frictionRate":0.4,"m_rough":0.4499,"m_restitution":0.4499,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{"m_uvScale":3.0,"m_materialType":"kSubwayTiles"}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cFolderObject","name":"SpawnLocations","guid":[1803916521,3674621259,2355104850,441818688],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"SpawnLocations"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal00","guid":[362184257,1300644271,2169624314,2670603163],"parentGuid":[1803916521,3674621259,2355104850,441818688],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[10.0,1.5,-10.0],"m_localRotation":[0.0,-0.3826,-0.0,0.9238]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal00"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal01","guid":[651144420,800934336,3039799213,1377036607],"parentGuid":[1803916521,3674621259,2355104850,441818688],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[10.0,1.5,10.0],"m_localRotation":[0.0,0.9238,0.0,-0.3826]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal01"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal02","guid":[4009425966,1206468687,2439525561,4287493119],"parentGuid":[1803916521,3674621259,2355104850,441818688],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-10.0,1.5,-10.0],"m_localRotation":[0.0,0.3826,0.0,0.9238]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal02"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cStartPortal","name":"StartPortal03","guid":[3415283602,2930724749,3175953031,3420113780],"parentGuid":[1803916521,3674621259,2355104850,441818688],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-10.0,1.5,10.0],"m_localRotation":[0.0,0.9238,0.0,0.3826]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StartPortal03"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sStartPortalComponent","data":{}}]},{"class":"cAudioSource","name":"BGM","guid":[1596674502,2319271992,2900844459,2801180766],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,0.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"BGM"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sAudioSourceComponent","data":{}}]},{"class":"cSkydome","name":"Sky","guid":[3956874685,1991789763,3220541584,1456680764],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,0.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Sky"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sSkydomeComponent","data":{"m_ambient":[0.5019,0.5019,0.5019,1.0],"m_latitude":45.0}},{"id":11,"class":"sDateTimeComponent","data":{}},{"id":12,"class":"sFogComponent","data":{}}]},{"class":"cFolderObject","name":"Players","guid":[3397398191,850542637,3138524115,1333674022],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Players"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[718760084,1257915969,2962466066,2150526306],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[438081159,4019275113,2394302102,997050187],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cPlayerInstanceSlot","name":"PlayerInstanceSlot","guid":[154289415,229392516,2254790969,287930189],"parentGuid":[3397398191,850542637,3138524115,1333674022],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerInstanceSlot"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerInstanceSlotComponent","data":{"m_archetype":[821939657,2231651804,3205518288,3133023722]}}]},{"class":"cTerrainObject","name":"Terrain","guid":[2381081137,2979483093,3156488065,1492146101],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Terrain"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":610,"class":"sTerrainComponent","data":{"m_memWaterStreamBuffer":[{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false}],"m_emptyPlaceholder":true,"m_terrainIndex":[0,1,2,3,4,5,6,7],"m_textures":[{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false},{"m_guid":[0,0,0,0],"m_revision":-1,"m_type":"kGeneric","m_autoGenerated":false}]}},{"id":13,"class":"sRenderComponent","data":{}},{"id":15,"class":"sRigidBodyComponent","data":{"m_frictionRate":0.4499,"m_rough":0.4,"m_restitution":0.3,"m_statusFlag":10}}]},{"class":"cStaticSpaceFolderObject","name":"StaticSpace","guid":[1156127896,989415793,2817242198,3730054242],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"StaticSpace"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}}]},{"class":"cPlayerInstance","name":"Npc","guid":[557654785,2380155339,3013303160,941967483],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,1.1147,-2.9]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Npc"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sRigidBodyComponent","data":{"m_isStatic":false,"m_density":1000.0,"m_frictionRate":0.0,"m_rough":0.0,"m_restitution":0.0,"m_freezeRotation":true,"m_statusFlag":10}},{"id":20,"class":"sCharacterControllerComponent","data":{"m_NPCController":true}},{"id":40,"class":"sCharacterStateComponent","data":{"m_avatar":[1231775529,3008252344,2697807223,2336561612],"m_displayName":true,"m_isNpc":true}},{"id":50,"class":"sRenderComponent","data":{}},{"id":60,"class":"sNetworkComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]},{"class":"cNpcAvatarInstance","name":"NpcAvatar","guid":[1231775529,3008252344,2697807223,2336561612],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sRegularTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NpcAvatar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sPlayerModelInstanceComponent","data":{"m_head":{"attriValue":"","valueList":["DefaultMale","Male_Head2","Male_Head3"]},"m_clothes":{"attriValue":"","valueList":["DefaultMale","Male_Chest_Naked_01","Male_Chest_TshirtShort_A001","Male_Chest_TshirtShort_A002","Male_Chest_TshirtShort_A003","Male_Chest_TshirtShort_A004","Male_Chest_TshirtShort_A005","Male_Chest_TshirtShort_A006","Male_Chest_TshirtShort_A007","Male_Chest_TshirtShort_A008","Male_Chest_TshirtShort_A009","Male_Chest_TshirtShort_A010","Male_Chest_TshirtShort_B001","Male_Chest_TshirtShort_B002","Male_Chest_TshirtShort_B003","Male_Chest_TshirtShort_B004","Male_Chest_TshirtShort_B005","Male_Chest_TshirtShort_B02001","Male_Chest_TshirtShort_B02002","Male_Chest_TshirtShort_B02003","Male_Chest_TshirtShort_B02004","Male_Chest_TshirtShort_B03001","Male_Chest_TshirtShort_B03002","Male_Chest_TshirtShort_03001","Male_Chest_TshirtShort_03002","Male_Chest_TshirtShort_03003","Male_Chest_TshirtShort_03004","Male_Chest_TshirtShort_03005","Male_Chest_SweaterLong_A001","Male_Chest_SweaterLong_A002","Male_Chest_SweaterLong_A003","Male_Chest_SweaterLong_A004","Male_Chest_SweaterLong_A005","Male_Chest_SweaterLong_A006","Male_Chest_SweaterLong_A007","Male_Chest_SweaterLong_A008","Male_Chest_SweaterLong_A009","Male_Chest_SweaterLong_A010","Male_Chest_SweaterLong_A011","Male_Chest_SweaterLong_A012","Male_Chest_SweaterLong_A013","Male_Chest_SweaterLong_A014","Male_Chest_SweaterLong_A015","Male_Chest_SweaterLong_A016","Male_Chest_SweaterLong_A017","Male_Chest_Jacket_Baseball_A001","Male_Chest_Jacket_Baseball_A002","Male_Chest_Jacket_Baseball_A003","Male_Chest_Jacket_Baseball_A004","Male_Chest_Jacket_Baseball_A005","Male_001Jacket","Male_Jacket_Leis01","RedJacket","Male_Jacket_Leis02","Male_Jacket_Leis03","Male_006Jacket","Male_007Jacket","Male_008Tshirt","Male_009Jacket","Male_010Tshirt","Male_011Tshirt","Male_012Jacket","Male_Chest_Robe_India_001","Male_Chest_JacketIndiaSilk_001","Male_AviatorJacket","Male_MexicJacket","Male_SpaceJacket","Male_BaseballJacket","Male_BaseballJacket_02","Male_UniverJacket","Male_UniverJacket_01","Male_OwlJacket","Male_OwlJacket_02","Male_Chest_ArmorGriffin_001","Male_Chest_ArmorGriffin_002","Unisex_Chest_ArmorIron_001","Unisex_Chest_ArmorIron_002","Male_WendigoJacket","Male_WendigoJacket_02","Male_NutJacket","Male_Chest_UniformPolice_001","Male_Chest_TshitSki_001","Male_Chest_JacketRobtDog_001","Male_Chest_MuscleSuitShark_001","Male_Chest_MuscleSuitShark_002","Male_Chest_TshirtWaste_001","Male_Chest_TshirtWaste_00","Male_Chest_JacketBiker_001","Male_Chest_JacketMotor_001","Male_Chest_TshirtSteam_001","Male_Chest_JacketRobtEva_001","Male_Chest_JacketRobtEva_002","Male_Chest_JacketRobtEva_003","Male_Chest_JacketRobtEva_004","Male_Chest_JacketAI_001","Male_Chest_JacketAI_002","Male_Chest_MadMaxVest_001","Male_Chest_MadMaxVest_002","Male_Chest_MadMaxVest_003","Male_Chest_TshirtCowboy_001","Male_Zombies01Tshirt","Male_Zombies03Jacket","Male_Zombies04Tshirt","Male_Zombies06Jacket","Male_Chest_JacketElf_001","Male_Chest_JacketCasual_001","Male_Chest_TshirtSArmy_001","Male_Chest_UniformSoccer_001","Male_Chest_JacketFire_001","Male_Chest_TshirtSStreetball_01_001","Male_Chest_TshirtSStreetball_02_002","Male_Chest_JacketEnergy_01_001","Male_Chest_SuitSuit_02_001","Male_Chest_SuitSuit_TV_001","Male_Chest_JacketLeisure_001","Male_Chest_ShirtLeisure_001","Male_Chest_TshirtSkater_001","Male_Chest_JacketWaste_002","Male_Chest_JacketWaste_02_002","Male_Chest_SweaterUnicorn_001","Male_Chest_JacketGreenBerets_001","Male_Chest_JacketSnow_01_001","Male_Chest_JacketSnow_01_002"]},"m_trousers":{"attriValue":"","valueList":["DefaultMale","Male_Jeans01Trousers","Male_Leis01Trousers","Male_003Trousers","Male_Leis01Pants","Male_Leis03Trousers","Male_006Trousers","Male_007Trousers","Male_008Trousers","Male_009Trousers","Male_010Trousers","Male_011Trousers","Male_012Pants","Male_Leg_Pants_India_001","Male_Leg_TrousersIndiaSilk_001","Male_AviatorTrousers","Male_AviatorTrousers_02","Male_MexicTrousers","Male_SpaceTrousers","Male_BaseballTrousers","Male_BaseballTrousers_02","Male_UniverTrousers","Male_UniverTrousers_01","Male_OwlTrousers","Male_OwlTrousers_02","Male_Leg_ArmorGriffin_001","Male_Leg_ArmorGriffin_002","Male_Leg_ArmorIron_001","Male_Leg_ArmorIron_002","Male_WendigoTrousers","Male_WendigoTrousers_02","Male_NutTrousers","Male_Leg_PantsLPolice_001","Male_Leg_PantsLPolice_002","Male_Leg_PantsLSki_001","Male_Leg_PantsLRobtDog_001","Male_Leg_TrousersWaste_001","Male_Leg_TrousersWaste_00","Male_Leg_TrousersBiker_001","Male_Leg_TrousersLMotor_001","Male_Leg_TrousersSteam_001","Male_Leg_PantsLRobtEva_001","Male_Leg_PantsLRobtEva_002","Male_Leg_PantsLAI_001","Male_Leg_TrousersMadMax_001","Male_Leg_TrousersMadMax_002","Male_Leg_TrousersCowboy_001","Male_Zombies01Pants","Male_Zombies03Trousers","Male_Zombies04Trousers","Male_Zombies06Trousers","Male_Leg_TrousersElf_001","Male_Leg_TrousersCasual_001","Male_Leg_PantsLArmy_001","Male_Leg_PantsSoccer_001","Male_Leg_FireTrousers","Male_Leg_Streetball_01PantsS","Male_Leg_Energy_01_MPantsS","Male_Leg_BeachShorts_A001","Male_Leg_BeachShorts_A002","Male_Leg_BeachShorts_A003","Male_Leg_BeachShorts_A004","Male_Leg_BeachShorts_A005","Male_Leg_BeachShorts_A006","Male_Leg_BeachShorts_A007","Male_Leg_BeachShorts_A008","Male_Leg_PantsShark_001","Male_Leg_PantsShark_002","Male_Leg_Suit_02_MTrousers","Male_Leg_Suit_TV_MTrousers","Male_Leg_PantsLLeisure_001","Male_Leg_PantsSkater_001","Male_Leg_PantsSWaste_002","Male_Leg_PantsLUnicorn_001","Male_Leg_TrousersGreenBerets_001","Male_Leg_PantsLSnow_01_001","Male_Leg_PantsLSnow_01_002"]},"m_hair":{"attriValue":"","valueList":["DefaultMale","Hair_Brown01M","Hair_Blonde01M","Hair_Blonde02M","Hair_Orange01M","Hair_White01M","Hair_Green01M","Male_Head_Hair_010","Male_Head_Hair_014","Male_Head_Hair_015","Male_Head_Hair_018","Male_Head_Hair_019","Male_Head_Hair_020","Male_Head_Hair_023","Male_Head_Hair_024","Male_Head_Hair_028","Male_Head_Hair_030","Male_Head_Hair_033","Hair_Zombies06_M"]},"m_hairColor":{"attriValue":"","valueList":["DefaultMale","Hair_Male_02","Hair_Male_03","Hair_Male_04","Hair_Male_05","Hair_Male_06","Hair_Male_07","Hair_Male_08","Hair_Male_09","Hair_Male_10","Hair_Male_11","Hair_Male_12","Hair_Male_13","Hair_Male_14","Hair_Male_15","Hair_Male_16","Hair_Male_17","Hair_Male_18","Hair_Male_19","Hair_Male_20","Hair_Male_21","Hair_Male_22","Hair_Male_23","Hair_Male_24"]},"m_hands":{"attriValue":"","valueList":["DefaultMale","Default_Hands","Male_GLeather01","Male_AviatorGloves","Male_SpaceGloves","Male_BaseballGloves","Male_UniverGloves","Male_UniverGloves_01","Male_OwlGloves","Unisex_Hand_GlovesGriffin_001","Unisex_Hand_GlovesIron_001","Male_WendigoGloves","Male_WendigoGloves_02","Unisex_Hand_GlovesSki_001","Unisex_Hand_GlovesRobtDog_001","Male_Hand_GlovesBiker_001","Unisex_Hand_GlovesRobtEva_001","Unisex_Hand_GlovesRobtEva_002","Unisex_Hand_GlovesAI_001","Male_Hand_GlovesSteam_001","Male_Hand_GlovesElf_001","Male_Hand_GlovesFire_001","Male_Hand_GlovesStreetball_001"]},"m_shoes":{"attriValue":"","valueList":["DefaultMale","Male_Feet_Naked_01","LeatherShoe","Male_Leis01Shoes","Unisex_Feet_CanvasShoes_A001","Unisex_Feet_CanvasShoes_A002","Unisex_Feet_CanvasShoes_A003","Unisex_Feet_CanvasShoes_A004","Unisex_Feet_CanvasShoes_A005","Unisex_Feet_CanvasShoes_A006","Unisex_Feet_CanvasShoes_A007","Unisex_Feet_CanvasShoes_A008","Unisex_Feet_CanvasShoes_A009","Unisex_Feet_CanvasShoes_A010","Unisex_Feet_Sneakers_01001","Unisex_Feet_Sneakers_01002","Unisex_Feet_Sneakers_01003","Unisex_Feet_Sneakers_01004","Unisex_Feet_Sneakers_01005","Unisex_Feet_Sneakers_01006","Unisex_Feet_Sneakers_01007","Unisex_Feet_Sneakers_01008","Unisex_Feet_Sneakers_01009","Unisex_Feet_Sneakers_01010","Unisex_Feet_Sneakers_01011","Unisex_Feet_Sneakers_01012","Unisex_Feet_Sneakers_01013","Unisex_Feet_Sneakers_01014","Unisex_Feet_Sneakers_01015","Unisex_Feet_Sneakers_01016","Male_003Shoes","Male_BLeather01","Male_Leis03Shoes","Male_006Shoes","Male_007Shoes","Male_008Shoes","Male_009Shoes","Unisex_Feet_BasketballShoes_003","Male_010Shoes","Male_011Boots","Male_012Boots","Male_Feet_Shoes_India_001","Male_Feet_ShoesIndiaSilk_001","Male_AviatorShoes","Male_MexicBoots","Male_SpaceBoots","Male_BaseballShoes","Male_UniverShoes","Male_UniverShoes_01","Male_OwlBoots","Unisex_Feet_ShoesGriffin_001","Unisex_Feet_ShoesIron_001","Male_WendigoShoes","Male_WendigoShoes_02","Male_NutBoots","Unisex_Feet_ShoesPolice_001","Unisex_Feet_BootsSki_001","Unisex_Feet_ShoesSki_001","Male_Feet_ShoesRobtDog_001","Unisex_Feet_SlippersShark_001","Male_Feet_BootsWaste_001","Male_Feet_BootsBiker_001","Male_Feet_BootsMotor_001","Male_Feet_BootsSteam_001","Unisex_Feet_ShoesRobtEva_001","Unisex_Feet_ShoesRobtEva_002","Unisex_Feet_ShoesAI_001","Male_Feet_BootsMadMax_001","Male_Feet_BootsCowboy_001","Male_Zombies01Shoes","Male_Zombies03Boots","Male_Zombies04Boots","Male_Zombies06Shoes","Male_Feet_BootsElf_001","Male_Feet_ShoesCasual_001","Unisex_Feet_ShoesDiving_001","Unisex_Feet_FinsDiving_001","Unisex_Feet_FinsDiving_002","Unisex_Feet_FinsDiving_003","Unisex_Feet_FinsDiving_004","Unisex_Feet_FinsDiving_005","Unisex_Feet_FinsDiving_006","Unisex_Feet_FinsDiving_007","Unisex_Feet_BootArmy_001","Male_Soccer_001_Shoes","Unisex_Feet_ShoesFire_001","Male_Streetball_01_Shoes","Male_Feet_BootsEnergy_01_M_001","Male_Feet_BootsSuit_02_M_001","Male_Feet_BootsSuit_TV_M_001","Female_Soccer_001_Shoes","Female_waste_04_Shoes","Female_Feet_ShoesLeisure_001","Male_Feet_ShoesLeisure_001","Male_Feet_ShoesSkater_001","Female_Feet_BootsWaste_002","Male_Feet_BootsUnicorn_001","Male_Feet_BootsGreenBerets_001","Male_Feet_BootsSnow_01_001"]},"m_skinColor":{"attriValue":"","valueList":["DefaultMale","Color2","Color3","Color4","Color5","Color6","Color7","Color8","Color9","Color10","Color11","Color12","Color13"]},"m_headAccessory":{"attriValue":"","valueList":["Empty_Head","Male_ComHat_001","Male_ComHat003","Male_ComHat004","Male_ComHat005","Male_ComHat006","Male_ComHat007","Male_ComHat00702","Male_ComHat00703","Unisex_Head_Hat_016","Male_008Hat","Male_010Hat","Male_011Hat","Male_012Hat","Male_Head_Hat_Leisure_001","Male_Head_Hat_Skater_001","Male_Head_ComHelmet_002","Male_ComHelmet003","Male_ComHelmet004","Male_ComHelmet005","Male_013Hat","Female_013Hat","Male_Head_HatCowboy_001","Male_Head_HatCasual_001","Male_AviatorHat","Male_MexicHat","Male_SpaceHelmet","Male_Baseball01Hat","Male_Baseball02Hat","Male_Baseball03Hat","Male_Baseball04Hat","Male_UniverHelmet","Male_UniverHelmet_01","Male_Owl_Helmet","Male_Head_HelmetGriffin_001","Unisex_Head_HelmetIron_001","Male_Wendigo_Helmet","Male_Wendigo_Helmet_02","Male_Nut_Helmet","Male_Head_Hat_Unicorn","Unisex_Head_MaskPolice_001","Unisex_Head_CapPolice_001","Unisex_Head_CapSki_001","Male_Head_HelmetRobtDog_001","Male_Head_HelmetShark_001","Male_Head_HelmetBiker_001","Female_Head_HelmetBiker_001","Female_Head_HelmetMotor_001","Male_Head_HelmetMotor_001","Male_Head_HatSteam_001","Unisex_Head_HelmetRobtEva_001","Unisex_Head_HelmetRobtEva_002","Unisex_Head_HelmetAI_001","Male_Head_HelmetSuit_TV_001","Female_Head_HelmetSuit_TV_001","Male_Head_Hat_India_001","Male_Head_HelmetIndiaSilk_001","Male_Head_HelmetIndiaSilk_002","Unisex_Head_HelmetArmy_001","Unisex_Head_HelmetFire_001","Male_Zombies01Hat","Male_Zombies03_Helmet","Male_Zombies04_Helmet","Male_Zombies06_Hat","Male_Head_HatElf_001","Unisex_Head_HelmetDiving_001","Unisex_Head_HelmetMadMax","Unisex_Head_HelmetGreenBerets","Unisex_Head_HelmetSnow_01_001","Unisex_Head_HatSnow_01_001","Unisex_Head_Headset_001","Unisex_Head_Headset_002","Unisex_Head_Headset_003","Unisex_Head_Headset_004","Unisex_Head_Headset_005","Unisex_Head_Hat_012","Unisex_Head_Hat_013","Unisex_Head_Hat_01401","Unisex_Head_Hat_01402","Unisex_Head_Hat_015"]},"m_faceAccessory":{"attriValue":"","valueList":["Empty_Face","Glasses","Unisex_Head_GlassLeisure_001","Unisex_Head_GlassSkater_001","Unisex_Head_GlassEnergy_001","Female_MadMax_Glasses","Unisex_Head_Glass_00101","Unisex_Head_Glass_00102","Unisex_Head_Glass_00201","Unisex_Head_Glass_00202","Unisex_Head_Glass_00203","Unisex_Head_Glass_003","Unisex_Head_Glass_004","Unisex_Head_Glass_005","Unisex_Head_Glass_006","Unisex_Head_Glass_007","Unisex_Head_Glass_008","Unisex_Head_Glass_010","Unisex_Head_Glass_011","Unisex_Head_Glass_012","Unisex_Head_Glass_013","Unisex_Head_Goggle_001","Unisex_Head_Goggle_002","Unisex_Head_Goggle_003","Unisex_Head_Goggle_004","Unisex_Head_Goggle_005","Unisex_Head_Goggle_006","Unisex_Head_Goggle_007","Unisex_Head_Decoration_00501","Unisex_Head_Decoration_00601","HeadSet","Unisex_Head_MaskMadMax","Unisex_Head_MaskFire_001","Unisex_Head_Mask_001","Unisex_Head_Mask_002","Unisex_Head_Mask_003","Unisex_Head_Mask_004","Unisex_Head_Mask_005","Unisex_Head_Mask_00701","Unisex_Head_Mask_00702","Unisex_Head_Mask_00703","Unisex_Head_Mask_008","Unisex_Head_Mask_00901","Unisex_Head_Mask_00902","Unisex_Head_MaskGreenBerets_001","Unisex_Head_Decoration_00101","Unisex_Head_Decoration_002","Unisex_Head_Decoration_003","Unisex_Head_Decoration_004","Unisex_Head_Earpods_Leisure_001"]},"m_bodyAccessory":{"attriValue":"","valueList":["Empty_Body","Male_AviatorScarf","Male_AviatorScarf_02","Male_AviatorScarf_03","Male_Zombies06_ChestSup","Unisex_Chest_LifeVest_01","Male_009Bag","Male_012Bag","Female_Chest_Hobo_002","Unisex_Body_BagLeisure_001","Male_AviatorBag","Male_MexicUkulele","Male_SpaceBag","Male_BaseballBag","Male_UniverBag","Male_WendigoBag","Unisex_Back_BackpackPolice_001","Unisex_Back_BackpackSki_001","Female_Back_BackpackSteam_001","Unisex_Chest_BackpackEnergy_001","Male_Zombies04Bag","Female_Zombies05Bag","Male_Zombies06Bag","Unisex_Chest_Backpack_00801","Unisex_Chest_Backpack_00901","Unisex_Chest_Backpack_01001","Unisex_Chest_Backpack_01101","Unisex_Chest_Backpack_01201","Unisex_Chest_ShoulderBag_00201","Unisex_Chest_ShoulderBag_00301","Unisex_Chest_ShoulderBag_00401","Unisex_Chest_ShoulderBag_00601","Male_Back_WingsElf_001","Male_Back_WingsUnicorn_001","Unisex_Back_BackpackCasual_001","Unisex_Chest_BagFire_001","Unisex_Chest_BackpackDiving_001","Female_Chest_OxygenDiving_001","Female_Chest_OxygenDiving_002","Male_BchestSup","Male_ComChestSup001","Male_ComChestSup002","Male_ComChestSup003","Unisex_Chest_FlakVestArmy_001","Unisex_Chest_FlakVest_ColaVending","Unisex_Chest_FlakVest_Chalkboard","Unisex_Chest_FlakVest_Light_00101","Unisex_Chest_FlakVest_Light_00102","Unisex_Chest_FlakVest_Pizzabox","Unisex_Chest_FlakVest_Recorder","Unisex_Chest_FlakVestStreetball_001","Unisex_Chest_FlakVestMadMax_001","Unisex_Chest_FlakVestMotor_001","Unisex_Chest_FlakVestGreenBerets_001","Unisex_Chest_FlakVestGreenBerets_002","Unisex_Chest_FlakVestSnow_01_001","LifeBuoy","Unisex_Pelvis_Lifebuoy_Duck_01","Unisex_Pelvis_Lifebuoy_Donut_01","Unisex_Pelvis_Lifebuoy_Donut_02","Unisex_Pelvis_Lifebuoy_Watermelon","Unisex_Pelvis_Lifebuoy_Tire","NutSabre","Male_Pelvis_Cowboy_GunBag","Unisex_BagWaste_002","Watch","Female_CasualWatch","Unisex_Hand_WatchDiving_001","Male_010Wrist","Female_CasualWrist","Male_IndiaSilkWrist","Male_SteamWrist","Male_011Wrist","Unisex_Arm_WristWaste_002","Unisex_Hand_WatchLeisure_01","Unisex_Hand_WatchSkater_01","Unisex_Hand_WristbandSkater_01","Unisex_Hand_WristbandSkater_002","Unisex_Hand_WristbandMadMax_01","Unisex_Hand_WristbandStreetball_01"]},"m_eyes":{"attriValue":"","valueList":["Default_Eyes_M","Idle02_Eyes_M","Idle03_Eyes_M","Idle04_Eyes_M","Idle05_Eyes_M","Idle06_Eyes_M","Idle07_Eyes_M","Idle08_Eyes_M","Idle09_Eyes_M","Idle10_Eyes_M","Idle11_Eyes_M","Idle12_Eyes_M"]},"m_eyesColor":{"attriValue":"","valueList":["DefaultMale","Eyes_C_02","Eyes_C_03","Eyes_C_04","Eyes_C_05","Eyes_C_06","Eyes_C_07","Eyes_C_08","Eyes_C_09"]},"m_brows":{"attriValue":"","valueList":["Default_Eyebrow_M","Idle02_Eyebrow_M","Idle03_Eyebrow_M","Idle04_Eyebrow_M","Idle05_Eyebrow_M","Idle06_Eyebrow_M","Idle07_Eyebrow_M","Idle08_Eyebrow_M","Idle09_Eyebrow_M","Idle10_Eyebrow_M","Idle11_Eyebrow_M","Idle12_Eyebrow_M"]},"m_nose":{"attriValue":"","valueList":["Default_Nose_M"]},"m_mouth":{"attriValue":"","valueList":["Default_Mouth_M","Idle02_Mouth_M","Idle03_Mouth_M","Idle04_Mouth_M","Idle05_Mouth_M","Idle06_Mouth_M","Idle07_Mouth_M","Idle08_Mouth_M","Idle09_Mouth_M","Idle10_Mouth_M","Idle11_Mouth_M","Idle12_Mouth_M"]},"m_beard":{"attriValue":"","valueList":["Default_Beard_M","Beard_01_M","Beard_02_M"]},"m_faceDecoration":{"attriValue":"","valueList":["Default_FaceDecorate_M","Decoration_01_M","Decoration_02_M","Decoration_03_M","Decoration_04_M"]}}},{"id":20,"class":"sAnimationComponent","data":{}},{"id":25,"class":"sPlayerExpressionComponent","data":{}},{"id":45,"class":"sAnimationIKFullBodyComponent","data":{"m_rightFootTarget":[2367310542,290605948,2615944327,1917812362]}},{"id":40,"class":"sPlayerModelInstanceRenderComponent","data":{}}]},{"class":"cUiSurfaceUiObject","name":"NameGUI","guid":[1482332550,3394717746,2868581290,2295237364],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,2.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameGUI","m_active":false}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUISurfaceRenderComponent","data":{}},{"id":26,"class":"sUiSurfaceUiComponent","data":{"m_billboard":true,"m_size":[300.0,80.0],"m_disappearDistance":15}}]},{"class":"cUiTextObject","name":"NameBar","guid":[1764275455,3033613466,2672385125,3091238670],"parentGuid":[1482332550,3394717746,2868581290,2295237364],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NameBar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":23,"class":"sUiTextComponent","data":{"m_widgetSize":[300.0,80.0],"m_text":"NPC","m_textColor":[255.0,255.0,255.0,255.0],"m_fontSize":32,"m_fontType":"kFZY4JY"}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiSurfaceUiObject","name":"HealthGUI","guid":[495557931,550323791,2284508679,1151179311],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[0.0,2.0,0.0]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"HealthGUI","m_active":false}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUISurfaceRenderComponent","data":{}},{"id":26,"class":"sUiSurfaceUiComponent","data":{"m_billboard":true,"m_size":[160.0,80.0]}}]},{"class":"cUiImageObject","name":"Background","guid":[1571337247,4276506147,2618749879,1933113932],"parentGuid":[495557931,550323791,2284508679,1151179311],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Background"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_addedSize":[160.0,31.0],"m_pivot":[0.0,0.0],"m_anchorsX":[0.0,0.0],"m_anchorsY":[0.0,0.0],"m_finalSize":[160.0,31.0],"m_offset":[0.0,6.0],"m_textureRef":{"m_guid":[2748549193,222842754,2941154731,726271496],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false}}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cUiImageObject","name":"HealthBar","guid":[2095581018,4193992826,3180616627,2874037211],"parentGuid":[1571337247,4276506147,2618749879,1933113932],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"HealthBar"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":20,"class":"sUIRenderComponent","data":{}},{"id":22,"class":"sUiImageComponent","data":{"m_pivot":[0.0,0.0],"m_anchorsX":[0.05,0.9499],"m_anchorsY":[0.3,0.6999],"m_finalSize":[144.0,12.3999],"m_textureRef":{"m_guid":[364921788,1323712570,2497125887,1146669227],"m_revision":0,"m_type":"kTexture","m_autoGenerated":false}}},{"id":27,"class":"sUiTouchEventComponent","data":{}}]},{"class":"cModuleScriptObject","name":"NpcMgrModule","guid":[2200592614,732054892,2510412088,3573524482],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NpcMgrModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local NPCmgrModule = {}\r\n\r\nlocal NPC = script.Parent\r\n\r\nfunction NPCmgrModule:CanSeePlayer(B3)\r\n    if Vector3.Angle(NPC.Forward, localPlayer.Position - NPC.Position) < 45 then\r\n        return B3.SUCCESS\r\n    else\r\n        return B3.FAILURE\r\n    end\r\nend\r\n\r\nreturn NPCmgrModule\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cModuleScriptObject","name":"NpcAiFuncModule","guid":[2438489667,650331335,3006900329,2568461899],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NpcAiFuncModule"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local NpcMgr = require(script.Parent.NpcMgrModule)\r\nlocal NpcAiFunc = {}\r\n\r\nfunction NpcAiFunc:Init()\r\n    local statusCheck = B3.Class('StatusCheck', B3.Condition)\r\n    B3.StatusCheck = statusCheck\r\n\r\n    function statusCheck:ctor()\r\n        B3.Condition.ctor(self)\r\n        self.name = 'StatusCheck'\r\n    end\r\n\r\n    function statusCheck:tick(tick)\r\n        print(self.title)\r\n        if (self.title == 'CanSeePlayer') then\r\n            return NpcMgr:CanSeePlayer(B3)\r\n        end\r\n        return B3.SUCCESS\r\n    end\r\n\r\n    local heroAction = B3.Class('HeroAction', B3.Action)\r\n    B3.HeroAction = heroAction\r\n\r\n    function heroAction:ctor()\r\n        B3.Action.ctor(self)\r\n        self.name = 'HeroAction'\r\n    end\r\n\r\n    function heroAction:tick(tick)\r\n        print(self.title)\r\n        return B3.SUCCESS\r\n    end\r\nend\r\n\r\nreturn NpcAiFunc\r\n","m_scriptType":"kModuleScript"}}]},{"class":"cScriptObject","name":"NpcMainScript","guid":[1516425449,617956124,2567249954,579591995],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"NpcMainScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local behaviorJson =\r\n    [[\r\n{\r\n  \"version\": \"0.3.0\",\r\n  \"scope\": \"tree\",\r\n  \"id\": \"298c3e26-e389-4354-aee6-0bc6db6fa551\",\r\n  \"title\": \"AISoldier\",\r\n  \"description\": \"\",\r\n  \"root\": \"e4ba5b3b-33bd-4355-8026-376a20ff121c\",\r\n  \"properties\": {},\r\n  \"nodes\": {\r\n    \"e4ba5b3b-33bd-4355-8026-376a20ff121c\": {\r\n      \"id\": \"e4ba5b3b-33bd-4355-8026-376a20ff121c\",\r\n      \"name\": \"Sequence\",\r\n      \"category\": \"composite\",\r\n      \"title\": \"Sequence\",\r\n      \"description\": \"\",\r\n      \"properties\": {},\r\n      \"display\": {\r\n        \"x\": 132,\r\n        \"y\": 0\r\n      },\r\n      \"children\": [\r\n        \"3edb35b2-c66a-4da8-b72a-70c2ab8ade68\",\r\n        \"22fbbc05-f5f9-4d06-848d-d77ff98d3bdc\"\r\n      ]\r\n    },\r\n    \"22fbbc05-f5f9-4d06-848d-d77ff98d3bdc\": {\r\n      \"id\": \"22fbbc05-f5f9-4d06-848d-d77ff98d3bdc\",\r\n      \"name\": \"HeroAction\",\r\n      \"category\": \"action\",\r\n      \"title\": \"Shot\",\r\n      \"description\": \"角色动作汇总，根据Title执行不同动作\",\r\n      \"properties\": {},\r\n      \"display\": {\r\n        \"x\": 336,\r\n        \"y\": 48\r\n      }\r\n    },\r\n    \"3edb35b2-c66a-4da8-b72a-70c2ab8ade68\": {\r\n      \"id\": \"3edb35b2-c66a-4da8-b72a-70c2ab8ade68\",\r\n      \"name\": \"StatusCheck\",\r\n      \"category\": \"condition\",\r\n      \"title\": \"CanSeePlayer\",\r\n      \"description\": \"角色状态检测，根据不同的Title执行不同检测\",\r\n      \"properties\": {},\r\n      \"display\": {\r\n        \"x\": 336,\r\n        \"y\": -36\r\n      }\r\n    }\r\n  },\r\n  \"display\": {\r\n    \"camera_x\": 492,\r\n    \"camera_y\": 380.5,\r\n    \"camera_z\": 1,\r\n    \"x\": 0,\r\n    \"y\": 0\r\n  },\r\n  \"custom_nodes\": [\r\n    {\r\n      \"version\": \"0.3.0\",\r\n      \"scope\": \"node\",\r\n      \"name\": \"HeroAction\",\r\n      \"category\": \"action\",\r\n      \"title\": \"角色动作\",\r\n      \"description\": \"角色动作汇总，根据Title执行不同动作\",\r\n      \"properties\": {}\r\n    },\r\n    {\r\n      \"version\": \"0.3.0\",\r\n      \"scope\": \"node\",\r\n      \"name\": \"StatusCheck\",\r\n      \"category\": \"condition\",\r\n      \"title\": \"角色状态\",\r\n      \"description\": \"角色状态检测，根据不同的Title执行不同检测\",\r\n      \"properties\": {}\r\n    }\r\n  ]\r\n}\r\n]]\r\n\r\nlocal NpcAiFunc = require(script.Parent.NpcAiFuncModule)\r\n\r\nNpcAiFunc:Init()\r\n\r\nwait(1)\r\nprint('------------------------------------------------')\r\nlocal behaviorTree = B3.BehaviorTree.new()\r\nlocal blackBoard = B3.Blackboard.new()\r\nbehaviorTree:load(behaviorJson, {})\r\nprint('------------------------------------------------')\r\n\r\nlocal NPC = script.Parent\r\n\r\nwhile (true) do\r\n    wait(1)\r\n    behaviorTree:tick(nil, blackBoard)\r\nend\r\n\r\n--local i = 1\r\n-- while true do\r\n--     wait(0.1)\r\n--     local v3 = localPlayer.Position - NPC.Position\r\n--     --NPC:FaceToDir(v3.Normalized,math.pi*10)\r\n--     --i = i+1\r\n--     print(Vector3.Angle(NPC.Forward, v3))\r\n--     --print(type(localPlayer.Right))\r\n-- end\r\n"}}]},{"class":"cScriptObject","name":"PlayerGUIScript","guid":[1672903388,596460199,2820999280,642118727],"parentGuid":[557654785,2380155339,3013303160,941967483],"components":[{"id":0,"class":"sIdentityTransform","data":{}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"PlayerGUIScript"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sLuaComponent","data":{"m_luaContent":"local player = script.Parent\r\n\r\nlocal nameGUI = player.NameGUI\r\nnameGUI.NameBar.Text = player.Name\r\nnameGUI.LocalPosition = Vector3(0, player.NpcAvatar.Height + 1.1, 0)\r\n\r\nlocal healthGUI = player.HealthGUI\r\nlocal background = healthGUI.Background\r\nlocal healthBar = background.HealthBar\r\nlocal RED_BAR = ResourceManager.GetTexture('Internal/Blood_Red')\r\nlocal GREEN_BAR = ResourceManager.GetTexture('Internal/Blood_Green')\r\nlocal ORANGE_BAR = ResourceManager.GetTexture('Internal/Blood_Orange')\r\n\r\nfunction NameBarLogic()\r\n    nameGUI:SetActive(player.DisplayName)\r\nend\r\nplayer.OnDisplayNameChanged:Connect(NameBarLogic)\r\n\r\nfunction healthChange(oldHealth, newHealth)\r\n    local percent = player.Health / player.MaxHealth\r\n    if player.HealthDisplayMode == Enum.HealthDisplayMode.OnHit then\r\n        healthGUI:SetActive(percent < 1)\r\n    end\r\n    if percent >= 0.7 then\r\n        healthBar.Texture = GREEN_BAR\r\n    elseif percent >= 0.3 then\r\n        healthBar.Texture = ORANGE_BAR\r\n    else\r\n        healthBar.Texture = RED_BAR\r\n    end\r\n    healthBar.AnchorsX = Vector2(0.05, 0.9 * percent + 0.05)\r\nend\r\nplayer.OnHealthChange:Connect(healthChange)\r\nplayer.OnMaxHealthChanged:Connect(healthChange)\r\n\r\nfunction HealthBarLogic()\r\n    if player.HealthDisplayMode == Enum.HealthDisplayMode.Always then\r\n        healthGUI:SetActive(true)\r\n    elseif player.HealthDisplayMode == Enum.HealthDisplayMode.Never then\r\n        healthGUI:SetActive(false)\r\n    elseif player.HealthDisplayMode == Enum.HealthDisplayMode.OnHit then\r\n        healthGUI:SetActive(player.Health ~= player.MaxHealth)\r\n    end\r\nend\r\nplayer.OnHealthDisplayModeChanged:Connect(HealthBarLogic)\r\n\r\nNameBarLogic()\r\nHealthBarLogic()\r\n"}}]},{"class":"cPrimitiveObject","name":"Sphere","guid":[2367310542,290605948,2615944327,1917812362],"parentGuid":[1981988479,3555894,2597800867,69741929],"components":[{"id":0,"class":"sRegularTransform","data":{"m_localPosition":[-8.7645,1.4004,-10.3711]}},{"id":665,"class":"sPhysicsDataCache","data":{}},{"id":2,"class":"sObjectDataComponent","data":{"m_name":"Sphere"}},{"id":19,"class":"sNetworkComponent","data":{}},{"id":40000,"class":"sScriptHelperComponent","data":{}},{"id":10,"class":"sBasicShapeComponent","data":{"m_shape":"kShapeSphere"}},{"id":12,"class":"sRigidBodyComponent","data":{"m_density":900.0,"m_frictionRate":0.4,"m_rough":0.3499,"m_restitution":0.6999,"m_statusFlag":10}},{"id":13,"class":"sMaterialComponent","data":{}},{"id":30,"class":"sPrimitiveRenderComponent","data":{}},{"id":3,"class":"sSizeComponent","data":{}},{"id":666,"class":"sStateSyncComponent","data":{}}]}]}]}